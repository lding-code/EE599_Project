import { __decorate, __metadata, __param } from "tslib";
import { Injectable, InjectionToken, Optional, Inject } from '@angular/core';
import { Subject, BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
export const EDITOR_SETTINGS = new InjectionToken('EDITOR_SETTINGS');
let CodeEditorService = class CodeEditorService {
    constructor(settings) {
        // baseUrl = 'assets/monaco';
        this.baseUrl = 'https://unpkg.com/monaco-editor/min';
        // typingsWorkerUrl = 'assets/workers/typings-worker.js';
        this.typingsWorkerUrl = 'https://unpkg.com/@ngstack/code-editor/workers/typings-worker.js';
        this.typingsLoaded = new Subject();
        this.loaded = new Subject();
        this.loadingTypings = new BehaviorSubject(false);
        const defaults = Object.assign({ baseUrl: this.baseUrl, typingsWorkerUrl: this.typingsWorkerUrl }, settings);
        this.baseUrl = defaults.baseUrl;
        this.typingsWorkerUrl = defaults.typingsWorkerUrl;
    }
    loadTypingsWorker() {
        if (!this.typingsWorker && window.Worker) {
            if (this.typingsWorkerUrl.startsWith('http')) {
                const proxyScript = `importScripts('${this.typingsWorkerUrl}');`;
                const proxy = URL.createObjectURL(new Blob([proxyScript], { type: 'text/javascript' }));
                this.typingsWorker = new Worker(proxy);
            }
            else {
                this.typingsWorker = new Worker(this.typingsWorkerUrl);
            }
            this.typingsWorker.addEventListener('message', e => {
                this.loadingTypings.next(false);
                this.typingsLoaded.next(e.data);
            });
        }
        return this.typingsWorker;
    }
    loadTypings(dependencies) {
        if (dependencies && dependencies.length > 0) {
            const worker = this.loadTypingsWorker();
            if (worker) {
                this.loadingTypings.next(true);
                worker.postMessage({
                    dependencies
                });
            }
        }
    }
    loadEditor() {
        return new Promise((resolve, reject) => {
            const onGotAmdLoader = () => {
                window.require.config({
                    paths: { vs: `${this.baseUrl}/vs` }
                });
                if (this.baseUrl.startsWith('http')) {
                    const proxyScript = `
            self.MonacoEnvironment = {
              baseUrl: "${this.baseUrl}"
            };
            importScripts('${this.baseUrl}/vs/base/worker/workerMain.js');
          `;
                    const proxy = URL.createObjectURL(new Blob([proxyScript], { type: 'text/javascript' }));
                    window['MonacoEnvironment'] = {
                        getWorkerUrl: function () {
                            return proxy;
                        }
                    };
                }
                window.require(['vs/editor/editor.main'], () => {
                    this.loaded.next({ monaco });
                    resolve();
                });
            };
            if (!window.require) {
                const loaderScript = document.createElement('script');
                loaderScript.type = 'text/javascript';
                loaderScript.src = `${this.baseUrl}/vs/loader.js`;
                loaderScript.addEventListener('load', onGotAmdLoader);
                document.body.appendChild(loaderScript);
            }
            else {
                onGotAmdLoader();
            }
        });
    }
};
CodeEditorService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [EDITOR_SETTINGS,] }] }
];
CodeEditorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CodeEditorService_Factory() { return new CodeEditorService(i0.ɵɵinject(EDITOR_SETTINGS, 8)); }, token: CodeEditorService, providedIn: "root" });
CodeEditorService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __param(0, Optional()),
    __param(0, Inject(EDITOR_SETTINGS)),
    __metadata("design:paramtypes", [Object])
], CodeEditorService);
export { CodeEditorService };
//# sourceMappingURL=data:application/json;base64,