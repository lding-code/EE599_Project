import { OnChanges, OnDestroy, AfterViewInit, ElementRef, EventEmitter, SimpleChanges, OnInit } from '@angular/core';
import { CodeEditorService } from '../services/code-editor.service';
import { TypescriptDefaultsService } from '../services/typescript-defaults.service';
import { JavascriptDefaultsService } from '../services/javascript-defaults.service';
import { JsonDefaultsService } from '../services/json-defaults.service';
import { CodeModel } from '../models/code.model';
export declare class CodeEditorComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit {
    private editorService;
    private typescriptDefaults;
    private javascriptDefaults;
    private jsonDefaults;
    private _editor;
    private _model;
    private defaultOptions;
    private subscriptions;
    editorContent: ElementRef;
    codeModel: CodeModel;
    /**
     * Editor theme. Defaults to `vs`.
     *
     * Allowed values: `vs`, `vs-dark` or `hc-black`.
     * @memberof CodeEditorComponent
     */
    theme: string;
    /**
     * Editor options.
     *
     * See https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.ieditorconstructionoptions.html for more details.
     *
     * @memberof CodeEditorComponent
     */
    options: {};
    /**
     * Toggle readonly state of the editor.
     *
     * @memberof CodeEditorComponent
     */
    readOnly: boolean;
    valueChanged: EventEmitter<string>;
    loaded: EventEmitter<any>;
    constructor(editorService: CodeEditorService, typescriptDefaults: TypescriptDefaultsService, javascriptDefaults: JavascriptDefaultsService, jsonDefaults: JsonDefaultsService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    onResize(): void;
    ngAfterViewInit(): Promise<void>;
    private setupEditor;
    private setupDependencies;
    private setEditorValue;
    private updateModel;
}
