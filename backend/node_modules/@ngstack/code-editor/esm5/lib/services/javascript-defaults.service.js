import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { CodeEditorService, TypingsInfo } from './code-editor.service';
import * as i0 from "@angular/core";
import * as i1 from "./code-editor.service";
var JavascriptDefaultsService = /** @class */ (function () {
    function JavascriptDefaultsService(codeEditorService) {
        var _this = this;
        codeEditorService.loaded.subscribe(function (event) {
            _this.setup(event.monaco);
        });
        codeEditorService.typingsLoaded.subscribe(function (typings) {
            _this.updateTypings(typings);
        });
    }
    JavascriptDefaultsService.prototype.setup = function (monaco) {
        if (!monaco) {
            return;
        }
        this.monaco = monaco;
        var defaults = monaco.languages.typescript.javascriptDefaults;
        defaults.setCompilerOptions({
            target: monaco.languages.typescript.ScriptTarget.ES6,
            module: 'commonjs',
            allowNonTsExtensions: true,
            baseUrl: '.',
            paths: {}
        });
        defaults.setMaximumWorkerIdleTime(-1);
        defaults.setEagerModelSync(true);
        /*
        defaults.setDiagnosticsOptions({
          noSemanticValidation: false,
          noSyntaxValidation: false
        });
        */
    };
    JavascriptDefaultsService.prototype.updateTypings = function (typings) {
        if (typings) {
            this.addExtraLibs(typings.files);
            this.addLibraryPaths(typings.entryPoints);
        }
    };
    JavascriptDefaultsService.prototype.addExtraLibs = function (libs) {
        if (libs === void 0) { libs = []; }
        if (!this.monaco || !libs || libs.length === 0) {
            return;
        }
        var defaults = this.monaco.languages.typescript.javascriptDefaults;
        // undocumented API
        var registeredLibs = defaults.getExtraLibs();
        libs.forEach(function (lib) {
            if (!registeredLibs[lib.path]) {
                // needs performance improvements, recreates its worker each time
                // defaults.addExtraLib(lib.content, lib.path);
                // undocumented API
                defaults._extraLibs[lib.path] = lib.content;
            }
        });
        // undocumented API
        defaults._onDidChange.fire(defaults);
    };
    JavascriptDefaultsService.prototype.addLibraryPaths = function (paths) {
        if (paths === void 0) { paths = {}; }
        if (!this.monaco) {
            return;
        }
        var defaults = this.monaco.languages.typescript.javascriptDefaults;
        var compilerOptions = defaults.getCompilerOptions();
        compilerOptions.paths = compilerOptions.paths || {};
        Object.keys(paths).forEach(function (key) {
            compilerOptions.paths[key] = [paths[key]];
        });
    };
    JavascriptDefaultsService.ctorParameters = function () { return [
        { type: CodeEditorService }
    ]; };
    JavascriptDefaultsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function JavascriptDefaultsService_Factory() { return new JavascriptDefaultsService(i0.ɵɵinject(i1.CodeEditorService)); }, token: JavascriptDefaultsService, providedIn: "root" });
    JavascriptDefaultsService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [CodeEditorService])
    ], JavascriptDefaultsService);
    return JavascriptDefaultsService;
}());
export { JavascriptDefaultsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamF2YXNjcmlwdC1kZWZhdWx0cy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nc3RhY2svY29kZS1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvamF2YXNjcmlwdC1kZWZhdWx0cy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBS3ZFO0lBR0UsbUNBQVksaUJBQW9DO1FBQWhELGlCQU9DO1FBTkMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFBLEtBQUs7WUFDdEMsS0FBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7UUFDSCxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFVBQUEsT0FBTztZQUMvQyxLQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELHlDQUFLLEdBQUwsVUFBTSxNQUFXO1FBQ2YsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBRXJCLElBQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDO1FBRWhFLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztZQUMxQixNQUFNLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEdBQUc7WUFDcEQsTUFBTSxFQUFFLFVBQVU7WUFDbEIsb0JBQW9CLEVBQUUsSUFBSTtZQUMxQixPQUFPLEVBQUUsR0FBRztZQUNaLEtBQUssRUFBRSxFQUFFO1NBQ1YsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWpDOzs7OztVQUtFO0lBQ0osQ0FBQztJQUVELGlEQUFhLEdBQWIsVUFBYyxPQUFvQjtRQUNoQyxJQUFJLE9BQU8sRUFBRTtZQUNYLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzNDO0lBQ0gsQ0FBQztJQUVELGdEQUFZLEdBQVosVUFBYSxJQUFtRDtRQUFuRCxxQkFBQSxFQUFBLFNBQW1EO1FBQzlELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzlDLE9BQU87U0FDUjtRQUVELElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQztRQUVyRSxtQkFBbUI7UUFDbkIsSUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRS9DLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBQSxHQUFHO1lBQ2QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzdCLGlFQUFpRTtnQkFDakUsK0NBQStDO2dCQUMvQyxtQkFBbUI7Z0JBQ25CLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUM7YUFDN0M7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILG1CQUFtQjtRQUNuQixRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsbURBQWUsR0FBZixVQUFnQixLQUFxQztRQUFyQyxzQkFBQSxFQUFBLFVBQXFDO1FBQ25ELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hCLE9BQU87U0FDUjtRQUVELElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQztRQUNyRSxJQUFNLGVBQWUsR0FBRyxRQUFRLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUN0RCxlQUFlLENBQUMsS0FBSyxHQUFHLGVBQWUsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO1FBRXBELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRztZQUM1QixlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztnQkEvRThCLGlCQUFpQjs7O0lBSHJDLHlCQUF5QjtRQUhyQyxVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO3lDQUkrQixpQkFBaUI7T0FIckMseUJBQXlCLENBbUZyQztvQ0F6RkQ7Q0F5RkMsQUFuRkQsSUFtRkM7U0FuRlkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29kZUVkaXRvclNlcnZpY2UsIFR5cGluZ3NJbmZvIH0gZnJvbSAnLi9jb2RlLWVkaXRvci5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgSmF2YXNjcmlwdERlZmF1bHRzU2VydmljZSB7XG4gIHByaXZhdGUgbW9uYWNvOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoY29kZUVkaXRvclNlcnZpY2U6IENvZGVFZGl0b3JTZXJ2aWNlKSB7XG4gICAgY29kZUVkaXRvclNlcnZpY2UubG9hZGVkLnN1YnNjcmliZShldmVudCA9PiB7XG4gICAgICB0aGlzLnNldHVwKGV2ZW50Lm1vbmFjbyk7XG4gICAgfSk7XG4gICAgY29kZUVkaXRvclNlcnZpY2UudHlwaW5nc0xvYWRlZC5zdWJzY3JpYmUodHlwaW5ncyA9PiB7XG4gICAgICB0aGlzLnVwZGF0ZVR5cGluZ3ModHlwaW5ncyk7XG4gICAgfSk7XG4gIH1cblxuICBzZXR1cChtb25hY286IGFueSk6IHZvaWQge1xuICAgIGlmICghbW9uYWNvKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5tb25hY28gPSBtb25hY287XG5cbiAgICBjb25zdCBkZWZhdWx0cyA9IG1vbmFjby5sYW5ndWFnZXMudHlwZXNjcmlwdC5qYXZhc2NyaXB0RGVmYXVsdHM7XG5cbiAgICBkZWZhdWx0cy5zZXRDb21waWxlck9wdGlvbnMoe1xuICAgICAgdGFyZ2V0OiBtb25hY28ubGFuZ3VhZ2VzLnR5cGVzY3JpcHQuU2NyaXB0VGFyZ2V0LkVTNixcbiAgICAgIG1vZHVsZTogJ2NvbW1vbmpzJyxcbiAgICAgIGFsbG93Tm9uVHNFeHRlbnNpb25zOiB0cnVlLFxuICAgICAgYmFzZVVybDogJy4nLFxuICAgICAgcGF0aHM6IHt9XG4gICAgfSk7XG5cbiAgICBkZWZhdWx0cy5zZXRNYXhpbXVtV29ya2VySWRsZVRpbWUoLTEpO1xuICAgIGRlZmF1bHRzLnNldEVhZ2VyTW9kZWxTeW5jKHRydWUpO1xuXG4gICAgLypcbiAgICBkZWZhdWx0cy5zZXREaWFnbm9zdGljc09wdGlvbnMoe1xuICAgICAgbm9TZW1hbnRpY1ZhbGlkYXRpb246IGZhbHNlLFxuICAgICAgbm9TeW50YXhWYWxpZGF0aW9uOiBmYWxzZVxuICAgIH0pO1xuICAgICovXG4gIH1cblxuICB1cGRhdGVUeXBpbmdzKHR5cGluZ3M6IFR5cGluZ3NJbmZvKSB7XG4gICAgaWYgKHR5cGluZ3MpIHtcbiAgICAgIHRoaXMuYWRkRXh0cmFMaWJzKHR5cGluZ3MuZmlsZXMpO1xuICAgICAgdGhpcy5hZGRMaWJyYXJ5UGF0aHModHlwaW5ncy5lbnRyeVBvaW50cyk7XG4gICAgfVxuICB9XG5cbiAgYWRkRXh0cmFMaWJzKGxpYnM6IEFycmF5PHsgcGF0aDogc3RyaW5nOyBjb250ZW50OiBzdHJpbmcgfT4gPSBbXSk6IHZvaWQge1xuICAgIGlmICghdGhpcy5tb25hY28gfHwgIWxpYnMgfHwgbGlicy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkZWZhdWx0cyA9IHRoaXMubW9uYWNvLmxhbmd1YWdlcy50eXBlc2NyaXB0LmphdmFzY3JpcHREZWZhdWx0cztcblxuICAgIC8vIHVuZG9jdW1lbnRlZCBBUElcbiAgICBjb25zdCByZWdpc3RlcmVkTGlicyA9IGRlZmF1bHRzLmdldEV4dHJhTGlicygpO1xuXG4gICAgbGlicy5mb3JFYWNoKGxpYiA9PiB7XG4gICAgICBpZiAoIXJlZ2lzdGVyZWRMaWJzW2xpYi5wYXRoXSkge1xuICAgICAgICAvLyBuZWVkcyBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudHMsIHJlY3JlYXRlcyBpdHMgd29ya2VyIGVhY2ggdGltZVxuICAgICAgICAvLyBkZWZhdWx0cy5hZGRFeHRyYUxpYihsaWIuY29udGVudCwgbGliLnBhdGgpO1xuICAgICAgICAvLyB1bmRvY3VtZW50ZWQgQVBJXG4gICAgICAgIGRlZmF1bHRzLl9leHRyYUxpYnNbbGliLnBhdGhdID0gbGliLmNvbnRlbnQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyB1bmRvY3VtZW50ZWQgQVBJXG4gICAgZGVmYXVsdHMuX29uRGlkQ2hhbmdlLmZpcmUoZGVmYXVsdHMpO1xuICB9XG5cbiAgYWRkTGlicmFyeVBhdGhzKHBhdGhzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge30pOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMubW9uYWNvKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGVmYXVsdHMgPSB0aGlzLm1vbmFjby5sYW5ndWFnZXMudHlwZXNjcmlwdC5qYXZhc2NyaXB0RGVmYXVsdHM7XG4gICAgY29uc3QgY29tcGlsZXJPcHRpb25zID0gZGVmYXVsdHMuZ2V0Q29tcGlsZXJPcHRpb25zKCk7XG4gICAgY29tcGlsZXJPcHRpb25zLnBhdGhzID0gY29tcGlsZXJPcHRpb25zLnBhdGhzIHx8IHt9O1xuXG4gICAgT2JqZWN0LmtleXMocGF0aHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbXBpbGVyT3B0aW9ucy5wYXRoc1trZXldID0gW3BhdGhzW2tleV1dO1xuICAgIH0pO1xuICB9XG59XG4iXX0=