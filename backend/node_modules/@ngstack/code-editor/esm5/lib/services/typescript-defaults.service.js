import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { CodeEditorService, TypingsInfo } from './code-editor.service';
import * as i0 from "@angular/core";
import * as i1 from "./code-editor.service";
var TypescriptDefaultsService = /** @class */ (function () {
    function TypescriptDefaultsService(codeEditorService) {
        var _this = this;
        codeEditorService.loaded.subscribe(function (event) {
            _this.setup(event.monaco);
        });
        codeEditorService.typingsLoaded.subscribe(function (typings) {
            _this.updateTypings(typings);
        });
    }
    TypescriptDefaultsService.prototype.setup = function (monaco) {
        if (!monaco) {
            return;
        }
        this.monaco = monaco;
        var defaults = monaco.languages.typescript.typescriptDefaults;
        defaults.setCompilerOptions({
            target: monaco.languages.typescript.ScriptTarget.ES6,
            module: 'commonjs',
            noEmit: true,
            noLib: true,
            emitDecoratorMetadata: true,
            experimentalDecorators: true,
            allowNonTsExtensions: true,
            declaration: true,
            lib: ['es2017', 'dom'],
            baseUrl: '.',
            paths: {}
        });
        defaults.setMaximumWorkerIdleTime(-1);
        defaults.setEagerModelSync(true);
        /*
        defaults.setDiagnosticsOptions({
          noSemanticValidation: true,
          noSyntaxValidation: true
        });
        */
    };
    TypescriptDefaultsService.prototype.updateTypings = function (typings) {
        if (typings) {
            this.addExtraLibs(typings.files);
            this.addLibraryPaths(typings.entryPoints);
        }
    };
    TypescriptDefaultsService.prototype.addExtraLibs = function (libs) {
        if (libs === void 0) { libs = []; }
        if (!this.monaco || !libs || libs.length === 0) {
            return;
        }
        var defaults = this.monaco.languages.typescript.typescriptDefaults;
        // undocumented API
        var registeredLibs = defaults.getExtraLibs();
        libs.forEach(function (lib) {
            if (!registeredLibs[lib.path]) {
                // needs performance improvements, recreates its worker each time
                // defaults.addExtraLib(lib.content, lib.path);
                // undocumented API
                defaults._extraLibs[lib.path] = lib.content;
            }
        });
        // undocumented API
        defaults._onDidChange.fire(defaults);
    };
    TypescriptDefaultsService.prototype.addLibraryPaths = function (paths) {
        if (paths === void 0) { paths = {}; }
        if (!this.monaco) {
            return;
        }
        var defaults = this.monaco.languages.typescript.typescriptDefaults;
        var compilerOptions = defaults.getCompilerOptions();
        compilerOptions.paths = compilerOptions.paths || {};
        Object.keys(paths).forEach(function (key) {
            compilerOptions.paths[key] = [paths[key]];
        });
    };
    TypescriptDefaultsService.ctorParameters = function () { return [
        { type: CodeEditorService }
    ]; };
    TypescriptDefaultsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TypescriptDefaultsService_Factory() { return new TypescriptDefaultsService(i0.ɵɵinject(i1.CodeEditorService)); }, token: TypescriptDefaultsService, providedIn: "root" });
    TypescriptDefaultsService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [CodeEditorService])
    ], TypescriptDefaultsService);
    return TypescriptDefaultsService;
}());
export { TypescriptDefaultsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXNjcmlwdC1kZWZhdWx0cy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nc3RhY2svY29kZS1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvdHlwZXNjcmlwdC1kZWZhdWx0cy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBS3ZFO0lBR0UsbUNBQVksaUJBQW9DO1FBQWhELGlCQU9DO1FBTkMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFBLEtBQUs7WUFDdEMsS0FBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7UUFDSCxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFVBQUEsT0FBTztZQUMvQyxLQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELHlDQUFLLEdBQUwsVUFBTSxNQUFXO1FBQ2YsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBRXJCLElBQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDO1FBRWhFLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztZQUMxQixNQUFNLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEdBQUc7WUFDcEQsTUFBTSxFQUFFLFVBQVU7WUFDbEIsTUFBTSxFQUFFLElBQUk7WUFDWixLQUFLLEVBQUUsSUFBSTtZQUNYLHFCQUFxQixFQUFFLElBQUk7WUFDM0Isc0JBQXNCLEVBQUUsSUFBSTtZQUM1QixvQkFBb0IsRUFBRSxJQUFJO1lBQzFCLFdBQVcsRUFBRSxJQUFJO1lBQ2pCLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUM7WUFDdEIsT0FBTyxFQUFFLEdBQUc7WUFDWixLQUFLLEVBQUUsRUFBRTtTQUNWLENBQUMsQ0FBQztRQUVILFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVqQzs7Ozs7VUFLRTtJQUNKLENBQUM7SUFFRCxpREFBYSxHQUFiLFVBQWMsT0FBb0I7UUFDaEMsSUFBSSxPQUFPLEVBQUU7WUFDWCxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNqQyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUMzQztJQUNILENBQUM7SUFFRCxnREFBWSxHQUFaLFVBQWEsSUFBbUQ7UUFBbkQscUJBQUEsRUFBQSxTQUFtRDtRQUM5RCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM5QyxPQUFPO1NBQ1I7UUFFRCxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUM7UUFFckUsbUJBQW1CO1FBQ25CLElBQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUUvQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRztZQUNkLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUM3QixpRUFBaUU7Z0JBQ2pFLCtDQUErQztnQkFDL0MsbUJBQW1CO2dCQUNuQixRQUFRLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDO2FBQzdDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxtQkFBbUI7UUFDbkIsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELG1EQUFlLEdBQWYsVUFBZ0IsS0FBcUM7UUFBckMsc0JBQUEsRUFBQSxVQUFxQztRQUNuRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQixPQUFPO1NBQ1I7UUFFRCxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUM7UUFDckUsSUFBTSxlQUFlLEdBQUcsUUFBUSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDdEQsZUFBZSxDQUFDLEtBQUssR0FBRyxlQUFlLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUVwRCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLEdBQUc7WUFDNUIsZUFBZSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBckY4QixpQkFBaUI7OztJQUhyQyx5QkFBeUI7UUFIckMsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQzt5Q0FJK0IsaUJBQWlCO09BSHJDLHlCQUF5QixDQXlGckM7b0NBL0ZEO0NBK0ZDLEFBekZELElBeUZDO1NBekZZLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvZGVFZGl0b3JTZXJ2aWNlLCBUeXBpbmdzSW5mbyB9IGZyb20gJy4vY29kZS1lZGl0b3Iuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFR5cGVzY3JpcHREZWZhdWx0c1NlcnZpY2Uge1xuICBwcml2YXRlIG1vbmFjbzogYW55O1xuXG4gIGNvbnN0cnVjdG9yKGNvZGVFZGl0b3JTZXJ2aWNlOiBDb2RlRWRpdG9yU2VydmljZSkge1xuICAgIGNvZGVFZGl0b3JTZXJ2aWNlLmxvYWRlZC5zdWJzY3JpYmUoZXZlbnQgPT4ge1xuICAgICAgdGhpcy5zZXR1cChldmVudC5tb25hY28pO1xuICAgIH0pO1xuICAgIGNvZGVFZGl0b3JTZXJ2aWNlLnR5cGluZ3NMb2FkZWQuc3Vic2NyaWJlKHR5cGluZ3MgPT4ge1xuICAgICAgdGhpcy51cGRhdGVUeXBpbmdzKHR5cGluZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgc2V0dXAobW9uYWNvOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAoIW1vbmFjbykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMubW9uYWNvID0gbW9uYWNvO1xuXG4gICAgY29uc3QgZGVmYXVsdHMgPSBtb25hY28ubGFuZ3VhZ2VzLnR5cGVzY3JpcHQudHlwZXNjcmlwdERlZmF1bHRzO1xuXG4gICAgZGVmYXVsdHMuc2V0Q29tcGlsZXJPcHRpb25zKHtcbiAgICAgIHRhcmdldDogbW9uYWNvLmxhbmd1YWdlcy50eXBlc2NyaXB0LlNjcmlwdFRhcmdldC5FUzYsXG4gICAgICBtb2R1bGU6ICdjb21tb25qcycsXG4gICAgICBub0VtaXQ6IHRydWUsXG4gICAgICBub0xpYjogdHJ1ZSxcbiAgICAgIGVtaXREZWNvcmF0b3JNZXRhZGF0YTogdHJ1ZSxcbiAgICAgIGV4cGVyaW1lbnRhbERlY29yYXRvcnM6IHRydWUsXG4gICAgICBhbGxvd05vblRzRXh0ZW5zaW9uczogdHJ1ZSxcbiAgICAgIGRlY2xhcmF0aW9uOiB0cnVlLFxuICAgICAgbGliOiBbJ2VzMjAxNycsICdkb20nXSxcbiAgICAgIGJhc2VVcmw6ICcuJyxcbiAgICAgIHBhdGhzOiB7fVxuICAgIH0pO1xuXG4gICAgZGVmYXVsdHMuc2V0TWF4aW11bVdvcmtlcklkbGVUaW1lKC0xKTtcbiAgICBkZWZhdWx0cy5zZXRFYWdlck1vZGVsU3luYyh0cnVlKTtcblxuICAgIC8qXG4gICAgZGVmYXVsdHMuc2V0RGlhZ25vc3RpY3NPcHRpb25zKHtcbiAgICAgIG5vU2VtYW50aWNWYWxpZGF0aW9uOiB0cnVlLFxuICAgICAgbm9TeW50YXhWYWxpZGF0aW9uOiB0cnVlXG4gICAgfSk7XG4gICAgKi9cbiAgfVxuXG4gIHVwZGF0ZVR5cGluZ3ModHlwaW5nczogVHlwaW5nc0luZm8pIHtcbiAgICBpZiAodHlwaW5ncykge1xuICAgICAgdGhpcy5hZGRFeHRyYUxpYnModHlwaW5ncy5maWxlcyk7XG4gICAgICB0aGlzLmFkZExpYnJhcnlQYXRocyh0eXBpbmdzLmVudHJ5UG9pbnRzKTtcbiAgICB9XG4gIH1cblxuICBhZGRFeHRyYUxpYnMobGliczogQXJyYXk8eyBwYXRoOiBzdHJpbmc7IGNvbnRlbnQ6IHN0cmluZyB9PiA9IFtdKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLm1vbmFjbyB8fCAhbGlicyB8fCBsaWJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRlZmF1bHRzID0gdGhpcy5tb25hY28ubGFuZ3VhZ2VzLnR5cGVzY3JpcHQudHlwZXNjcmlwdERlZmF1bHRzO1xuXG4gICAgLy8gdW5kb2N1bWVudGVkIEFQSVxuICAgIGNvbnN0IHJlZ2lzdGVyZWRMaWJzID0gZGVmYXVsdHMuZ2V0RXh0cmFMaWJzKCk7XG5cbiAgICBsaWJzLmZvckVhY2gobGliID0+IHtcbiAgICAgIGlmICghcmVnaXN0ZXJlZExpYnNbbGliLnBhdGhdKSB7XG4gICAgICAgIC8vIG5lZWRzIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50cywgcmVjcmVhdGVzIGl0cyB3b3JrZXIgZWFjaCB0aW1lXG4gICAgICAgIC8vIGRlZmF1bHRzLmFkZEV4dHJhTGliKGxpYi5jb250ZW50LCBsaWIucGF0aCk7XG4gICAgICAgIC8vIHVuZG9jdW1lbnRlZCBBUElcbiAgICAgICAgZGVmYXVsdHMuX2V4dHJhTGlic1tsaWIucGF0aF0gPSBsaWIuY29udGVudDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIHVuZG9jdW1lbnRlZCBBUElcbiAgICBkZWZhdWx0cy5fb25EaWRDaGFuZ2UuZmlyZShkZWZhdWx0cyk7XG4gIH1cblxuICBhZGRMaWJyYXJ5UGF0aHMocGF0aHM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7fSk6IHZvaWQge1xuICAgIGlmICghdGhpcy5tb25hY28pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkZWZhdWx0cyA9IHRoaXMubW9uYWNvLmxhbmd1YWdlcy50eXBlc2NyaXB0LnR5cGVzY3JpcHREZWZhdWx0cztcbiAgICBjb25zdCBjb21waWxlck9wdGlvbnMgPSBkZWZhdWx0cy5nZXRDb21waWxlck9wdGlvbnMoKTtcbiAgICBjb21waWxlck9wdGlvbnMucGF0aHMgPSBjb21waWxlck9wdGlvbnMucGF0aHMgfHwge307XG5cbiAgICBPYmplY3Qua2V5cyhwYXRocykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgY29tcGlsZXJPcHRpb25zLnBhdGhzW2tleV0gPSBbcGF0aHNba2V5XV07XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==