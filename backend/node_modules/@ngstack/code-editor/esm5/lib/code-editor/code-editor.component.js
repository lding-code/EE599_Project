import { __assign, __awaiter, __decorate, __generator, __metadata } from "tslib";
import { Component, ChangeDetectionStrategy, ViewEncapsulation, ViewChild, ElementRef, Input, Output, EventEmitter, HostListener, } from '@angular/core';
import { CodeEditorService } from '../services/code-editor.service';
import { TypescriptDefaultsService } from '../services/typescript-defaults.service';
import { JavascriptDefaultsService } from '../services/javascript-defaults.service';
import { JsonDefaultsService } from '../services/json-defaults.service';
var CodeEditorComponent = /** @class */ (function () {
    function CodeEditorComponent(editorService, typescriptDefaults, javascriptDefaults, jsonDefaults) {
        this.editorService = editorService;
        this.typescriptDefaults = typescriptDefaults;
        this.javascriptDefaults = javascriptDefaults;
        this.jsonDefaults = jsonDefaults;
        // private _value = '';
        this.defaultOptions = {
            lineNumbers: true,
            contextmenu: false,
            minimap: {
                enabled: false,
            },
        };
        this.subscriptions = [];
        // @Input()
        // set value(v: string) {
        //   if (v !== this._value) {
        //     this._value = v;
        //     this.setEditorValue(v);
        //     this.valueChanged.emit(v);
        //   }
        // }
        // get value(): string {
        //   return this._value;
        // }
        /**
         * Editor theme. Defaults to `vs`.
         *
         * Allowed values: `vs`, `vs-dark` or `hc-black`.
         * @memberof CodeEditorComponent
         */
        this.theme = 'vs';
        /**
         * Editor options.
         *
         * See https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.ieditorconstructionoptions.html for more details.
         *
         * @memberof CodeEditorComponent
         */
        this.options = {};
        /**
         * Toggle readonly state of the editor.
         *
         * @memberof CodeEditorComponent
         */
        this.readOnly = false;
        this.valueChanged = new EventEmitter();
        this.loaded = new EventEmitter();
    }
    CodeEditorComponent.prototype.ngOnInit = function () { };
    CodeEditorComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
        this.subscriptions = [];
        if (this._editor) {
            this._editor.dispose();
            this._editor = null;
        }
        if (this._model) {
            this._model.dispose();
            this._model = null;
        }
    };
    CodeEditorComponent.prototype.ngOnChanges = function (changes) {
        if (changes.codeModel && !changes.codeModel.firstChange) {
            this.updateModel(changes.codeModel.currentValue);
        }
        if (changes.readOnly && !changes.readOnly.firstChange) {
            if (this._editor) {
                this._editor.updateOptions({
                    readOnly: changes.readOnly.currentValue,
                });
            }
        }
        if (changes.theme && !changes.theme.firstChange) {
            monaco.editor.setTheme(changes.theme.currentValue);
        }
    };
    CodeEditorComponent.prototype.onResize = function () {
        if (this._editor) {
            this._editor.layout();
        }
    };
    CodeEditorComponent.prototype.ngAfterViewInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.editorService.loadEditor()];
                    case 1:
                        _a.sent();
                        this.setupEditor();
                        this.loaded.emit();
                        return [2 /*return*/];
                }
            });
        });
    };
    CodeEditorComponent.prototype.setupEditor = function () {
        var _this = this;
        var domElement = this.editorContent.nativeElement;
        var settings = __assign({ value: '', language: 'text', uri: 'code' }, this.codeModel);
        this._model = monaco.editor.createModel(settings.value, settings.language, monaco.Uri.file(settings.uri));
        var options = Object.assign({}, this.defaultOptions, this.options, {
            readOnly: this.readOnly,
            theme: this.theme,
            model: this._model,
        });
        this._editor = monaco.editor.create(domElement, options);
        this._model.onDidChangeContent(function (e) {
            var newValue = _this._model.getValue();
            if (_this.codeModel) {
                _this.codeModel.value = newValue;
            }
            _this.valueChanged.emit(newValue);
        });
        this.setupDependencies(this.codeModel);
    };
    CodeEditorComponent.prototype.setupDependencies = function (model) {
        if (!model) {
            return;
        }
        var language = model.language;
        if (language) {
            var lang = language.toLowerCase();
            switch (lang) {
                case 'typescript':
                    if (model.dependencies) {
                        this.editorService.loadTypings(model.dependencies);
                    }
                    break;
                case 'javascript':
                    if (model.dependencies) {
                        this.editorService.loadTypings(model.dependencies);
                    }
                    break;
                case 'json':
                    if (model.schemas) {
                        this.jsonDefaults.addSchemas(model.uri, model.schemas);
                    }
                    break;
                default:
                    break;
            }
        }
    };
    CodeEditorComponent.prototype.setEditorValue = function (value) {
        var _this = this;
        // Fix for value change while dispose in process.
        setTimeout(function () {
            if (_this._model) {
                _this._model.setValue(value);
            }
        });
    };
    CodeEditorComponent.prototype.updateModel = function (model) {
        if (model) {
            this.setEditorValue(model.value);
            if (this._model && typeof monaco !== undefined) {
                monaco.editor.setModelLanguage(this._model, model.language);
            }
            this.setupDependencies(model);
        }
    };
    CodeEditorComponent.ctorParameters = function () { return [
        { type: CodeEditorService },
        { type: TypescriptDefaultsService },
        { type: JavascriptDefaultsService },
        { type: JsonDefaultsService }
    ]; };
    __decorate([
        ViewChild('editor', { static: true }),
        __metadata("design:type", ElementRef)
    ], CodeEditorComponent.prototype, "editorContent", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CodeEditorComponent.prototype, "codeModel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CodeEditorComponent.prototype, "theme", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CodeEditorComponent.prototype, "options", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CodeEditorComponent.prototype, "readOnly", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], CodeEditorComponent.prototype, "valueChanged", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], CodeEditorComponent.prototype, "loaded", void 0);
    __decorate([
        HostListener('window:resize'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], CodeEditorComponent.prototype, "onResize", null);
    CodeEditorComponent = __decorate([
        Component({
            selector: 'ngs-code-editor',
            template: "<div id=\"editor\" #editor class=\"monaco-editor editor\"></div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            encapsulation: ViewEncapsulation.None,
            // tslint:disable-next-line
            host: { class: 'ngs-code-editor' },
            styles: [".editor{width:100%;height:inherit;min-height:200px}"]
        }),
        __metadata("design:paramtypes", [CodeEditorService,
            TypescriptDefaultsService,
            JavascriptDefaultsService,
            JsonDefaultsService])
    ], CodeEditorComponent);
    return CodeEditorComponent;
}());
export { CodeEditorComponent };
//# sourceMappingURL=data:application/json;base64,