import { __assign, __decorate, __metadata, __param } from "tslib";
import { Injectable, InjectionToken, Optional, Inject } from '@angular/core';
import { Subject, BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
export var EDITOR_SETTINGS = new InjectionToken('EDITOR_SETTINGS');
var CodeEditorService = /** @class */ (function () {
    function CodeEditorService(settings) {
        // baseUrl = 'assets/monaco';
        this.baseUrl = 'https://unpkg.com/monaco-editor/min';
        // typingsWorkerUrl = 'assets/workers/typings-worker.js';
        this.typingsWorkerUrl = 'https://unpkg.com/@ngstack/code-editor/workers/typings-worker.js';
        this.typingsLoaded = new Subject();
        this.loaded = new Subject();
        this.loadingTypings = new BehaviorSubject(false);
        var defaults = __assign({ baseUrl: this.baseUrl, typingsWorkerUrl: this.typingsWorkerUrl }, settings);
        this.baseUrl = defaults.baseUrl;
        this.typingsWorkerUrl = defaults.typingsWorkerUrl;
    }
    CodeEditorService.prototype.loadTypingsWorker = function () {
        var _this = this;
        if (!this.typingsWorker && window.Worker) {
            if (this.typingsWorkerUrl.startsWith('http')) {
                var proxyScript = "importScripts('" + this.typingsWorkerUrl + "');";
                var proxy = URL.createObjectURL(new Blob([proxyScript], { type: 'text/javascript' }));
                this.typingsWorker = new Worker(proxy);
            }
            else {
                this.typingsWorker = new Worker(this.typingsWorkerUrl);
            }
            this.typingsWorker.addEventListener('message', function (e) {
                _this.loadingTypings.next(false);
                _this.typingsLoaded.next(e.data);
            });
        }
        return this.typingsWorker;
    };
    CodeEditorService.prototype.loadTypings = function (dependencies) {
        if (dependencies && dependencies.length > 0) {
            var worker = this.loadTypingsWorker();
            if (worker) {
                this.loadingTypings.next(true);
                worker.postMessage({
                    dependencies: dependencies
                });
            }
        }
    };
    CodeEditorService.prototype.loadEditor = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var onGotAmdLoader = function () {
                window.require.config({
                    paths: { vs: _this.baseUrl + "/vs" }
                });
                if (_this.baseUrl.startsWith('http')) {
                    var proxyScript = "\n            self.MonacoEnvironment = {\n              baseUrl: \"" + _this.baseUrl + "\"\n            };\n            importScripts('" + _this.baseUrl + "/vs/base/worker/workerMain.js');\n          ";
                    var proxy_1 = URL.createObjectURL(new Blob([proxyScript], { type: 'text/javascript' }));
                    window['MonacoEnvironment'] = {
                        getWorkerUrl: function () {
                            return proxy_1;
                        }
                    };
                }
                window.require(['vs/editor/editor.main'], function () {
                    _this.loaded.next({ monaco: monaco });
                    resolve();
                });
            };
            if (!window.require) {
                var loaderScript = document.createElement('script');
                loaderScript.type = 'text/javascript';
                loaderScript.src = _this.baseUrl + "/vs/loader.js";
                loaderScript.addEventListener('load', onGotAmdLoader);
                document.body.appendChild(loaderScript);
            }
            else {
                onGotAmdLoader();
            }
        });
    };
    CodeEditorService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [EDITOR_SETTINGS,] }] }
    ]; };
    CodeEditorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CodeEditorService_Factory() { return new CodeEditorService(i0.ɵɵinject(EDITOR_SETTINGS, 8)); }, token: CodeEditorService, providedIn: "root" });
    CodeEditorService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(0, Optional()),
        __param(0, Inject(EDITOR_SETTINGS)),
        __metadata("design:paramtypes", [Object])
    ], CodeEditorService);
    return CodeEditorService;
}());
export { CodeEditorService };
//# sourceMappingURL=data:application/json;base64,