(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@ngstack/code-editor', ['exports', '@angular/core', 'rxjs', '@angular/common'], factory) :
    (global = global || self, factory((global.ngstack = global.ngstack || {}, global.ngstack['code-editor'] = {}), global.ng.core, global.rxjs, global.ng.common));
}(this, (function (exports, core, rxjs, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var EDITOR_SETTINGS = new core.InjectionToken('EDITOR_SETTINGS');
    var CodeEditorService = /** @class */ (function () {
        function CodeEditorService(settings) {
            // baseUrl = 'assets/monaco';
            this.baseUrl = 'https://unpkg.com/monaco-editor/min';
            // typingsWorkerUrl = 'assets/workers/typings-worker.js';
            this.typingsWorkerUrl = 'https://unpkg.com/@ngstack/code-editor/workers/typings-worker.js';
            this.typingsLoaded = new rxjs.Subject();
            this.loaded = new rxjs.Subject();
            this.loadingTypings = new rxjs.BehaviorSubject(false);
            var defaults = __assign({ baseUrl: this.baseUrl, typingsWorkerUrl: this.typingsWorkerUrl }, settings);
            this.baseUrl = defaults.baseUrl;
            this.typingsWorkerUrl = defaults.typingsWorkerUrl;
        }
        CodeEditorService.prototype.loadTypingsWorker = function () {
            var _this = this;
            if (!this.typingsWorker && window.Worker) {
                if (this.typingsWorkerUrl.startsWith('http')) {
                    var proxyScript = "importScripts('" + this.typingsWorkerUrl + "');";
                    var proxy = URL.createObjectURL(new Blob([proxyScript], { type: 'text/javascript' }));
                    this.typingsWorker = new Worker(proxy);
                }
                else {
                    this.typingsWorker = new Worker(this.typingsWorkerUrl);
                }
                this.typingsWorker.addEventListener('message', function (e) {
                    _this.loadingTypings.next(false);
                    _this.typingsLoaded.next(e.data);
                });
            }
            return this.typingsWorker;
        };
        CodeEditorService.prototype.loadTypings = function (dependencies) {
            if (dependencies && dependencies.length > 0) {
                var worker = this.loadTypingsWorker();
                if (worker) {
                    this.loadingTypings.next(true);
                    worker.postMessage({
                        dependencies: dependencies
                    });
                }
            }
        };
        CodeEditorService.prototype.loadEditor = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var onGotAmdLoader = function () {
                    window.require.config({
                        paths: { vs: _this.baseUrl + "/vs" }
                    });
                    if (_this.baseUrl.startsWith('http')) {
                        var proxyScript = "\n            self.MonacoEnvironment = {\n              baseUrl: \"" + _this.baseUrl + "\"\n            };\n            importScripts('" + _this.baseUrl + "/vs/base/worker/workerMain.js');\n          ";
                        var proxy_1 = URL.createObjectURL(new Blob([proxyScript], { type: 'text/javascript' }));
                        window['MonacoEnvironment'] = {
                            getWorkerUrl: function () {
                                return proxy_1;
                            }
                        };
                    }
                    window.require(['vs/editor/editor.main'], function () {
                        _this.loaded.next({ monaco: monaco });
                        resolve();
                    });
                };
                if (!window.require) {
                    var loaderScript = document.createElement('script');
                    loaderScript.type = 'text/javascript';
                    loaderScript.src = _this.baseUrl + "/vs/loader.js";
                    loaderScript.addEventListener('load', onGotAmdLoader);
                    document.body.appendChild(loaderScript);
                }
                else {
                    onGotAmdLoader();
                }
            });
        };
        CodeEditorService.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [EDITOR_SETTINGS,] }] }
        ]; };
        CodeEditorService.ɵprov = core.ɵɵdefineInjectable({ factory: function CodeEditorService_Factory() { return new CodeEditorService(core.ɵɵinject(EDITOR_SETTINGS, 8)); }, token: CodeEditorService, providedIn: "root" });
        CodeEditorService = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __param(0, core.Optional()),
            __param(0, core.Inject(EDITOR_SETTINGS)),
            __metadata("design:paramtypes", [Object])
        ], CodeEditorService);
        return CodeEditorService;
    }());

    var TypescriptDefaultsService = /** @class */ (function () {
        function TypescriptDefaultsService(codeEditorService) {
            var _this = this;
            codeEditorService.loaded.subscribe(function (event) {
                _this.setup(event.monaco);
            });
            codeEditorService.typingsLoaded.subscribe(function (typings) {
                _this.updateTypings(typings);
            });
        }
        TypescriptDefaultsService.prototype.setup = function (monaco) {
            if (!monaco) {
                return;
            }
            this.monaco = monaco;
            var defaults = monaco.languages.typescript.typescriptDefaults;
            defaults.setCompilerOptions({
                target: monaco.languages.typescript.ScriptTarget.ES6,
                module: 'commonjs',
                noEmit: true,
                noLib: true,
                emitDecoratorMetadata: true,
                experimentalDecorators: true,
                allowNonTsExtensions: true,
                declaration: true,
                lib: ['es2017', 'dom'],
                baseUrl: '.',
                paths: {}
            });
            defaults.setMaximumWorkerIdleTime(-1);
            defaults.setEagerModelSync(true);
            /*
            defaults.setDiagnosticsOptions({
              noSemanticValidation: true,
              noSyntaxValidation: true
            });
            */
        };
        TypescriptDefaultsService.prototype.updateTypings = function (typings) {
            if (typings) {
                this.addExtraLibs(typings.files);
                this.addLibraryPaths(typings.entryPoints);
            }
        };
        TypescriptDefaultsService.prototype.addExtraLibs = function (libs) {
            if (libs === void 0) { libs = []; }
            if (!this.monaco || !libs || libs.length === 0) {
                return;
            }
            var defaults = this.monaco.languages.typescript.typescriptDefaults;
            // undocumented API
            var registeredLibs = defaults.getExtraLibs();
            libs.forEach(function (lib) {
                if (!registeredLibs[lib.path]) {
                    // needs performance improvements, recreates its worker each time
                    // defaults.addExtraLib(lib.content, lib.path);
                    // undocumented API
                    defaults._extraLibs[lib.path] = lib.content;
                }
            });
            // undocumented API
            defaults._onDidChange.fire(defaults);
        };
        TypescriptDefaultsService.prototype.addLibraryPaths = function (paths) {
            if (paths === void 0) { paths = {}; }
            if (!this.monaco) {
                return;
            }
            var defaults = this.monaco.languages.typescript.typescriptDefaults;
            var compilerOptions = defaults.getCompilerOptions();
            compilerOptions.paths = compilerOptions.paths || {};
            Object.keys(paths).forEach(function (key) {
                compilerOptions.paths[key] = [paths[key]];
            });
        };
        TypescriptDefaultsService.ctorParameters = function () { return [
            { type: CodeEditorService }
        ]; };
        TypescriptDefaultsService.ɵprov = core.ɵɵdefineInjectable({ factory: function TypescriptDefaultsService_Factory() { return new TypescriptDefaultsService(core.ɵɵinject(CodeEditorService)); }, token: TypescriptDefaultsService, providedIn: "root" });
        TypescriptDefaultsService = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __metadata("design:paramtypes", [CodeEditorService])
        ], TypescriptDefaultsService);
        return TypescriptDefaultsService;
    }());

    var JavascriptDefaultsService = /** @class */ (function () {
        function JavascriptDefaultsService(codeEditorService) {
            var _this = this;
            codeEditorService.loaded.subscribe(function (event) {
                _this.setup(event.monaco);
            });
            codeEditorService.typingsLoaded.subscribe(function (typings) {
                _this.updateTypings(typings);
            });
        }
        JavascriptDefaultsService.prototype.setup = function (monaco) {
            if (!monaco) {
                return;
            }
            this.monaco = monaco;
            var defaults = monaco.languages.typescript.javascriptDefaults;
            defaults.setCompilerOptions({
                target: monaco.languages.typescript.ScriptTarget.ES6,
                module: 'commonjs',
                allowNonTsExtensions: true,
                baseUrl: '.',
                paths: {}
            });
            defaults.setMaximumWorkerIdleTime(-1);
            defaults.setEagerModelSync(true);
            /*
            defaults.setDiagnosticsOptions({
              noSemanticValidation: false,
              noSyntaxValidation: false
            });
            */
        };
        JavascriptDefaultsService.prototype.updateTypings = function (typings) {
            if (typings) {
                this.addExtraLibs(typings.files);
                this.addLibraryPaths(typings.entryPoints);
            }
        };
        JavascriptDefaultsService.prototype.addExtraLibs = function (libs) {
            if (libs === void 0) { libs = []; }
            if (!this.monaco || !libs || libs.length === 0) {
                return;
            }
            var defaults = this.monaco.languages.typescript.javascriptDefaults;
            // undocumented API
            var registeredLibs = defaults.getExtraLibs();
            libs.forEach(function (lib) {
                if (!registeredLibs[lib.path]) {
                    // needs performance improvements, recreates its worker each time
                    // defaults.addExtraLib(lib.content, lib.path);
                    // undocumented API
                    defaults._extraLibs[lib.path] = lib.content;
                }
            });
            // undocumented API
            defaults._onDidChange.fire(defaults);
        };
        JavascriptDefaultsService.prototype.addLibraryPaths = function (paths) {
            if (paths === void 0) { paths = {}; }
            if (!this.monaco) {
                return;
            }
            var defaults = this.monaco.languages.typescript.javascriptDefaults;
            var compilerOptions = defaults.getCompilerOptions();
            compilerOptions.paths = compilerOptions.paths || {};
            Object.keys(paths).forEach(function (key) {
                compilerOptions.paths[key] = [paths[key]];
            });
        };
        JavascriptDefaultsService.ctorParameters = function () { return [
            { type: CodeEditorService }
        ]; };
        JavascriptDefaultsService.ɵprov = core.ɵɵdefineInjectable({ factory: function JavascriptDefaultsService_Factory() { return new JavascriptDefaultsService(core.ɵɵinject(CodeEditorService)); }, token: JavascriptDefaultsService, providedIn: "root" });
        JavascriptDefaultsService = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __metadata("design:paramtypes", [CodeEditorService])
        ], JavascriptDefaultsService);
        return JavascriptDefaultsService;
    }());

    var JsonDefaultsService = /** @class */ (function () {
        function JsonDefaultsService(codeEditorService) {
            var _this = this;
            codeEditorService.loaded.subscribe(function (event) {
                _this.setup(event.monaco);
            });
        }
        JsonDefaultsService.prototype.setup = function (monaco) {
            if (!monaco) {
                return;
            }
            this.monaco = monaco;
            var defaults = monaco.languages.json.jsonDefaults;
            defaults.setDiagnosticsOptions({
                validate: true,
                allowComments: true,
                schemas: __spread(defaults._diagnosticsOptions.schemas, [
                    {
                        uri: 'http://myserver/foo-schema.json',
                        // fileMatch: [id],
                        // fileMatch: ['*.json'],
                        schema: {
                            type: 'object',
                            properties: {
                                p1: {
                                    enum: ['v1', 'v2']
                                },
                                p2: {
                                    $ref: 'http://myserver/bar-schema.json'
                                }
                            }
                        }
                    },
                    {
                        uri: 'http://myserver/bar-schema.json',
                        // fileMatch: [id],
                        // fileMatch: ['*.json'],
                        schema: {
                            type: 'object',
                            properties: {
                                q1: {
                                    enum: ['x1', 'x2']
                                }
                            }
                        }
                    }
                ])
            });
        };
        JsonDefaultsService.prototype.addSchemas = function (id, definitions) {
            var e_1, _a;
            if (definitions === void 0) { definitions = []; }
            var defaults = this.monaco.languages.json.jsonDefaults;
            var options = defaults.diagnosticsOptions;
            var schemas = {};
            if (options && options.schemas && options.schemas.length > 0) {
                options.schemas.forEach(function (schema) {
                    schemas[schema.uri] = schema;
                });
            }
            try {
                for (var definitions_1 = __values(definitions), definitions_1_1 = definitions_1.next(); !definitions_1_1.done; definitions_1_1 = definitions_1.next()) {
                    var _b = definitions_1_1.value, uri = _b.uri, schema = _b.schema;
                    schemas[uri] = {
                        uri: uri,
                        schema: schema,
                        fileMatch: [id || '*.json']
                    };
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (definitions_1_1 && !definitions_1_1.done && (_a = definitions_1.return)) _a.call(definitions_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            // console.log(schemas);
            // console.log(Object.values(schemas));
            options.schemas = Object.values(schemas);
            defaults.setDiagnosticsOptions(options);
        };
        JsonDefaultsService.ctorParameters = function () { return [
            { type: CodeEditorService }
        ]; };
        JsonDefaultsService.ɵprov = core.ɵɵdefineInjectable({ factory: function JsonDefaultsService_Factory() { return new JsonDefaultsService(core.ɵɵinject(CodeEditorService)); }, token: JsonDefaultsService, providedIn: "root" });
        JsonDefaultsService = __decorate([
            core.Injectable({
                providedIn: 'root'
            }),
            __metadata("design:paramtypes", [CodeEditorService])
        ], JsonDefaultsService);
        return JsonDefaultsService;
    }());

    var CodeEditorComponent = /** @class */ (function () {
        function CodeEditorComponent(editorService, typescriptDefaults, javascriptDefaults, jsonDefaults) {
            this.editorService = editorService;
            this.typescriptDefaults = typescriptDefaults;
            this.javascriptDefaults = javascriptDefaults;
            this.jsonDefaults = jsonDefaults;
            // private _value = '';
            this.defaultOptions = {
                lineNumbers: true,
                contextmenu: false,
                minimap: {
                    enabled: false,
                },
            };
            this.subscriptions = [];
            // @Input()
            // set value(v: string) {
            //   if (v !== this._value) {
            //     this._value = v;
            //     this.setEditorValue(v);
            //     this.valueChanged.emit(v);
            //   }
            // }
            // get value(): string {
            //   return this._value;
            // }
            /**
             * Editor theme. Defaults to `vs`.
             *
             * Allowed values: `vs`, `vs-dark` or `hc-black`.
             * @memberof CodeEditorComponent
             */
            this.theme = 'vs';
            /**
             * Editor options.
             *
             * See https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.ieditorconstructionoptions.html for more details.
             *
             * @memberof CodeEditorComponent
             */
            this.options = {};
            /**
             * Toggle readonly state of the editor.
             *
             * @memberof CodeEditorComponent
             */
            this.readOnly = false;
            this.valueChanged = new core.EventEmitter();
            this.loaded = new core.EventEmitter();
        }
        CodeEditorComponent.prototype.ngOnInit = function () { };
        CodeEditorComponent.prototype.ngOnDestroy = function () {
            this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
            this.subscriptions = [];
            if (this._editor) {
                this._editor.dispose();
                this._editor = null;
            }
            if (this._model) {
                this._model.dispose();
                this._model = null;
            }
        };
        CodeEditorComponent.prototype.ngOnChanges = function (changes) {
            if (changes.codeModel && !changes.codeModel.firstChange) {
                this.updateModel(changes.codeModel.currentValue);
            }
            if (changes.readOnly && !changes.readOnly.firstChange) {
                if (this._editor) {
                    this._editor.updateOptions({
                        readOnly: changes.readOnly.currentValue,
                    });
                }
            }
            if (changes.theme && !changes.theme.firstChange) {
                monaco.editor.setTheme(changes.theme.currentValue);
            }
        };
        CodeEditorComponent.prototype.onResize = function () {
            if (this._editor) {
                this._editor.layout();
            }
        };
        CodeEditorComponent.prototype.ngAfterViewInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.editorService.loadEditor()];
                        case 1:
                            _a.sent();
                            this.setupEditor();
                            this.loaded.emit();
                            return [2 /*return*/];
                    }
                });
            });
        };
        CodeEditorComponent.prototype.setupEditor = function () {
            var _this = this;
            var domElement = this.editorContent.nativeElement;
            var settings = __assign({ value: '', language: 'text', uri: 'code' }, this.codeModel);
            this._model = monaco.editor.createModel(settings.value, settings.language, monaco.Uri.file(settings.uri));
            var options = Object.assign({}, this.defaultOptions, this.options, {
                readOnly: this.readOnly,
                theme: this.theme,
                model: this._model,
            });
            this._editor = monaco.editor.create(domElement, options);
            this._model.onDidChangeContent(function (e) {
                var newValue = _this._model.getValue();
                if (_this.codeModel) {
                    _this.codeModel.value = newValue;
                }
                _this.valueChanged.emit(newValue);
            });
            this.setupDependencies(this.codeModel);
        };
        CodeEditorComponent.prototype.setupDependencies = function (model) {
            if (!model) {
                return;
            }
            var language = model.language;
            if (language) {
                var lang = language.toLowerCase();
                switch (lang) {
                    case 'typescript':
                        if (model.dependencies) {
                            this.editorService.loadTypings(model.dependencies);
                        }
                        break;
                    case 'javascript':
                        if (model.dependencies) {
                            this.editorService.loadTypings(model.dependencies);
                        }
                        break;
                    case 'json':
                        if (model.schemas) {
                            this.jsonDefaults.addSchemas(model.uri, model.schemas);
                        }
                        break;
                    default:
                        break;
                }
            }
        };
        CodeEditorComponent.prototype.setEditorValue = function (value) {
            var _this = this;
            // Fix for value change while dispose in process.
            setTimeout(function () {
                if (_this._model) {
                    _this._model.setValue(value);
                }
            });
        };
        CodeEditorComponent.prototype.updateModel = function (model) {
            if (model) {
                this.setEditorValue(model.value);
                if (this._model && typeof monaco !== undefined) {
                    monaco.editor.setModelLanguage(this._model, model.language);
                }
                this.setupDependencies(model);
            }
        };
        CodeEditorComponent.ctorParameters = function () { return [
            { type: CodeEditorService },
            { type: TypescriptDefaultsService },
            { type: JavascriptDefaultsService },
            { type: JsonDefaultsService }
        ]; };
        __decorate([
            core.ViewChild('editor', { static: true }),
            __metadata("design:type", core.ElementRef)
        ], CodeEditorComponent.prototype, "editorContent", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], CodeEditorComponent.prototype, "codeModel", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], CodeEditorComponent.prototype, "theme", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], CodeEditorComponent.prototype, "options", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], CodeEditorComponent.prototype, "readOnly", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], CodeEditorComponent.prototype, "valueChanged", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], CodeEditorComponent.prototype, "loaded", void 0);
        __decorate([
            core.HostListener('window:resize'),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], CodeEditorComponent.prototype, "onResize", null);
        CodeEditorComponent = __decorate([
            core.Component({
                selector: 'ngs-code-editor',
                template: "<div id=\"editor\" #editor class=\"monaco-editor editor\"></div>\n",
                changeDetection: core.ChangeDetectionStrategy.OnPush,
                encapsulation: core.ViewEncapsulation.None,
                // tslint:disable-next-line
                host: { class: 'ngs-code-editor' },
                styles: [".editor{width:100%;height:inherit;min-height:200px}"]
            }),
            __metadata("design:paramtypes", [CodeEditorService,
                TypescriptDefaultsService,
                JavascriptDefaultsService,
                JsonDefaultsService])
        ], CodeEditorComponent);
        return CodeEditorComponent;
    }());

    var CodeEditorModule = /** @class */ (function () {
        function CodeEditorModule() {
        }
        CodeEditorModule_1 = CodeEditorModule;
        CodeEditorModule.forRoot = function (settings) {
            return {
                ngModule: CodeEditorModule_1,
                providers: [
                    { provide: EDITOR_SETTINGS, useValue: settings },
                    CodeEditorService,
                    TypescriptDefaultsService,
                    JavascriptDefaultsService,
                    JsonDefaultsService
                ]
            };
        };
        CodeEditorModule.forChild = function () {
            return {
                ngModule: CodeEditorModule_1
            };
        };
        var CodeEditorModule_1;
        CodeEditorModule = CodeEditorModule_1 = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                declarations: [CodeEditorComponent],
                exports: [CodeEditorComponent]
            })
        ], CodeEditorModule);
        return CodeEditorModule;
    }());

    exports.CodeEditorComponent = CodeEditorComponent;
    exports.CodeEditorModule = CodeEditorModule;
    exports.CodeEditorService = CodeEditorService;
    exports.EDITOR_SETTINGS = EDITOR_SETTINGS;
    exports.JavascriptDefaultsService = JavascriptDefaultsService;
    exports.TypescriptDefaultsService = TypescriptDefaultsService;
    exports.ɵb = JsonDefaultsService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngstack-code-editor.umd.js.map
