import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { CodeEditorService } from './code-editor.service';
import * as i0 from "@angular/core";
import * as i1 from "./code-editor.service";
let JsonDefaultsService = class JsonDefaultsService {
    constructor(codeEditorService) {
        codeEditorService.loaded.subscribe(event => {
            this.setup(event.monaco);
        });
    }
    setup(monaco) {
        if (!monaco) {
            return;
        }
        this.monaco = monaco;
        const defaults = monaco.languages.json.jsonDefaults;
        defaults.setDiagnosticsOptions({
            validate: true,
            allowComments: true,
            schemas: [
                ...defaults._diagnosticsOptions.schemas,
                {
                    uri: 'http://myserver/foo-schema.json',
                    // fileMatch: [id],
                    // fileMatch: ['*.json'],
                    schema: {
                        type: 'object',
                        properties: {
                            p1: {
                                enum: ['v1', 'v2']
                            },
                            p2: {
                                $ref: 'http://myserver/bar-schema.json'
                            }
                        }
                    }
                },
                {
                    uri: 'http://myserver/bar-schema.json',
                    // fileMatch: [id],
                    // fileMatch: ['*.json'],
                    schema: {
                        type: 'object',
                        properties: {
                            q1: {
                                enum: ['x1', 'x2']
                            }
                        }
                    }
                }
            ]
        });
    }
    addSchemas(id, definitions = []) {
        const defaults = this.monaco.languages.json.jsonDefaults;
        const options = defaults.diagnosticsOptions;
        const schemas = {};
        if (options && options.schemas && options.schemas.length > 0) {
            options.schemas.forEach(schema => {
                schemas[schema.uri] = schema;
            });
        }
        for (const { uri, schema } of definitions) {
            schemas[uri] = {
                uri,
                schema,
                fileMatch: [id || '*.json']
            };
        }
        // console.log(schemas);
        // console.log(Object.values(schemas));
        options.schemas = Object.values(schemas);
        defaults.setDiagnosticsOptions(options);
    }
};
JsonDefaultsService.ctorParameters = () => [
    { type: CodeEditorService }
];
JsonDefaultsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function JsonDefaultsService_Factory() { return new JsonDefaultsService(i0.ɵɵinject(i1.CodeEditorService)); }, token: JsonDefaultsService, providedIn: "root" });
JsonDefaultsService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __metadata("design:paramtypes", [CodeEditorService])
], JsonDefaultsService);
export { JsonDefaultsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1kZWZhdWx0cy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nc3RhY2svY29kZS1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvanNvbi1kZWZhdWx0cy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7QUFLMUQsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBbUI7SUFHOUIsWUFBWSxpQkFBb0M7UUFDOUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN6QyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBVztRQUNmLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUVyQixNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFFcEQsUUFBUSxDQUFDLHFCQUFxQixDQUFDO1lBQzdCLFFBQVEsRUFBRSxJQUFJO1lBQ2QsYUFBYSxFQUFFLElBQUk7WUFDbkIsT0FBTyxFQUFFO2dCQUNQLEdBQUcsUUFBUSxDQUFDLG1CQUFtQixDQUFDLE9BQU87Z0JBQ3ZDO29CQUNFLEdBQUcsRUFBRSxpQ0FBaUM7b0JBQ3RDLG1CQUFtQjtvQkFDbkIseUJBQXlCO29CQUN6QixNQUFNLEVBQUU7d0JBQ04sSUFBSSxFQUFFLFFBQVE7d0JBQ2QsVUFBVSxFQUFFOzRCQUNWLEVBQUUsRUFBRTtnQ0FDRixJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDOzZCQUNuQjs0QkFDRCxFQUFFLEVBQUU7Z0NBQ0YsSUFBSSxFQUFFLGlDQUFpQzs2QkFDeEM7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7Z0JBQ0Q7b0JBQ0UsR0FBRyxFQUFFLGlDQUFpQztvQkFDdEMsbUJBQW1CO29CQUNuQix5QkFBeUI7b0JBQ3pCLE1BQU0sRUFBRTt3QkFDTixJQUFJLEVBQUUsUUFBUTt3QkFDZCxVQUFVLEVBQUU7NEJBQ1YsRUFBRSxFQUFFO2dDQUNGLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7NkJBQ25CO3lCQUNGO3FCQUNGO2lCQUNGO2FBQ0Y7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsVUFBVSxDQUNSLEVBQVUsRUFDVixjQUFzRCxFQUFFO1FBRXhELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDekQsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGtCQUFrQixDQUFDO1FBRTVDLE1BQU0sT0FBTyxHQUE4QixFQUFFLENBQUM7UUFFOUMsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDNUQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQy9CLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO1lBQy9CLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxLQUFLLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksV0FBVyxFQUFFO1lBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRztnQkFDYixHQUFHO2dCQUNILE1BQU07Z0JBQ04sU0FBUyxFQUFFLENBQUMsRUFBRSxJQUFJLFFBQVEsQ0FBQzthQUM1QixDQUFDO1NBQ0g7UUFFRCx3QkFBd0I7UUFDeEIsdUNBQXVDO1FBRXZDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QyxRQUFRLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUMsQ0FBQztDQUNGLENBQUE7O1lBbEZnQyxpQkFBaUI7OztBQUhyQyxtQkFBbUI7SUFIL0IsVUFBVSxDQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQztxQ0FJK0IsaUJBQWlCO0dBSHJDLG1CQUFtQixDQXFGL0I7U0FyRlksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29kZUVkaXRvclNlcnZpY2UgfSBmcm9tICcuL2NvZGUtZWRpdG9yLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBKc29uRGVmYXVsdHNTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBtb25hY286IGFueTtcblxuICBjb25zdHJ1Y3Rvcihjb2RlRWRpdG9yU2VydmljZTogQ29kZUVkaXRvclNlcnZpY2UpIHtcbiAgICBjb2RlRWRpdG9yU2VydmljZS5sb2FkZWQuc3Vic2NyaWJlKGV2ZW50ID0+IHtcbiAgICAgIHRoaXMuc2V0dXAoZXZlbnQubW9uYWNvKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNldHVwKG1vbmFjbzogYW55KTogdm9pZCB7XG4gICAgaWYgKCFtb25hY28pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm1vbmFjbyA9IG1vbmFjbztcblxuICAgIGNvbnN0IGRlZmF1bHRzID0gbW9uYWNvLmxhbmd1YWdlcy5qc29uLmpzb25EZWZhdWx0cztcblxuICAgIGRlZmF1bHRzLnNldERpYWdub3N0aWNzT3B0aW9ucyh7XG4gICAgICB2YWxpZGF0ZTogdHJ1ZSxcbiAgICAgIGFsbG93Q29tbWVudHM6IHRydWUsXG4gICAgICBzY2hlbWFzOiBbXG4gICAgICAgIC4uLmRlZmF1bHRzLl9kaWFnbm9zdGljc09wdGlvbnMuc2NoZW1hcyxcbiAgICAgICAge1xuICAgICAgICAgIHVyaTogJ2h0dHA6Ly9teXNlcnZlci9mb28tc2NoZW1hLmpzb24nLFxuICAgICAgICAgIC8vIGZpbGVNYXRjaDogW2lkXSxcbiAgICAgICAgICAvLyBmaWxlTWF0Y2g6IFsnKi5qc29uJ10sXG4gICAgICAgICAgc2NoZW1hOiB7XG4gICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgcDE6IHtcbiAgICAgICAgICAgICAgICBlbnVtOiBbJ3YxJywgJ3YyJ11cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgcDI6IHtcbiAgICAgICAgICAgICAgICAkcmVmOiAnaHR0cDovL215c2VydmVyL2Jhci1zY2hlbWEuanNvbidcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHVyaTogJ2h0dHA6Ly9teXNlcnZlci9iYXItc2NoZW1hLmpzb24nLFxuICAgICAgICAgIC8vIGZpbGVNYXRjaDogW2lkXSxcbiAgICAgICAgICAvLyBmaWxlTWF0Y2g6IFsnKi5qc29uJ10sXG4gICAgICAgICAgc2NoZW1hOiB7XG4gICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgcTE6IHtcbiAgICAgICAgICAgICAgICBlbnVtOiBbJ3gxJywgJ3gyJ11cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pO1xuICB9XG5cbiAgYWRkU2NoZW1hcyhcbiAgICBpZDogc3RyaW5nLFxuICAgIGRlZmluaXRpb25zOiBBcnJheTx7IHVyaTogc3RyaW5nOyBzY2hlbWE6IE9iamVjdCB9PiA9IFtdXG4gICkge1xuICAgIGNvbnN0IGRlZmF1bHRzID0gdGhpcy5tb25hY28ubGFuZ3VhZ2VzLmpzb24uanNvbkRlZmF1bHRzO1xuICAgIGNvbnN0IG9wdGlvbnMgPSBkZWZhdWx0cy5kaWFnbm9zdGljc09wdGlvbnM7XG5cbiAgICBjb25zdCBzY2hlbWFzOiB7IFtrZXk6IHN0cmluZ106IE9iamVjdCB9ID0ge307XG5cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnNjaGVtYXMgJiYgb3B0aW9ucy5zY2hlbWFzLmxlbmd0aCA+IDApIHtcbiAgICAgIG9wdGlvbnMuc2NoZW1hcy5mb3JFYWNoKHNjaGVtYSA9PiB7XG4gICAgICAgIHNjaGVtYXNbc2NoZW1hLnVyaV0gPSBzY2hlbWE7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHsgdXJpLCBzY2hlbWEgfSBvZiBkZWZpbml0aW9ucykge1xuICAgICAgc2NoZW1hc1t1cmldID0ge1xuICAgICAgICB1cmksXG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgZmlsZU1hdGNoOiBbaWQgfHwgJyouanNvbiddXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIGNvbnNvbGUubG9nKHNjaGVtYXMpO1xuICAgIC8vIGNvbnNvbGUubG9nKE9iamVjdC52YWx1ZXMoc2NoZW1hcykpO1xuXG4gICAgb3B0aW9ucy5zY2hlbWFzID0gT2JqZWN0LnZhbHVlcyhzY2hlbWFzKTtcbiAgICBkZWZhdWx0cy5zZXREaWFnbm9zdGljc09wdGlvbnMob3B0aW9ucyk7XG4gIH1cbn1cbiJdfQ==