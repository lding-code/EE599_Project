import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { CodeEditorService, TypingsInfo } from './code-editor.service';
import * as i0 from "@angular/core";
import * as i1 from "./code-editor.service";
let TypescriptDefaultsService = class TypescriptDefaultsService {
    constructor(codeEditorService) {
        codeEditorService.loaded.subscribe(event => {
            this.setup(event.monaco);
        });
        codeEditorService.typingsLoaded.subscribe(typings => {
            this.updateTypings(typings);
        });
    }
    setup(monaco) {
        if (!monaco) {
            return;
        }
        this.monaco = monaco;
        const defaults = monaco.languages.typescript.typescriptDefaults;
        defaults.setCompilerOptions({
            target: monaco.languages.typescript.ScriptTarget.ES6,
            module: 'commonjs',
            noEmit: true,
            noLib: true,
            emitDecoratorMetadata: true,
            experimentalDecorators: true,
            allowNonTsExtensions: true,
            declaration: true,
            lib: ['es2017', 'dom'],
            baseUrl: '.',
            paths: {}
        });
        defaults.setMaximumWorkerIdleTime(-1);
        defaults.setEagerModelSync(true);
        /*
        defaults.setDiagnosticsOptions({
          noSemanticValidation: true,
          noSyntaxValidation: true
        });
        */
    }
    updateTypings(typings) {
        if (typings) {
            this.addExtraLibs(typings.files);
            this.addLibraryPaths(typings.entryPoints);
        }
    }
    addExtraLibs(libs = []) {
        if (!this.monaco || !libs || libs.length === 0) {
            return;
        }
        const defaults = this.monaco.languages.typescript.typescriptDefaults;
        // undocumented API
        const registeredLibs = defaults.getExtraLibs();
        libs.forEach(lib => {
            if (!registeredLibs[lib.path]) {
                // needs performance improvements, recreates its worker each time
                // defaults.addExtraLib(lib.content, lib.path);
                // undocumented API
                defaults._extraLibs[lib.path] = lib.content;
            }
        });
        // undocumented API
        defaults._onDidChange.fire(defaults);
    }
    addLibraryPaths(paths = {}) {
        if (!this.monaco) {
            return;
        }
        const defaults = this.monaco.languages.typescript.typescriptDefaults;
        const compilerOptions = defaults.getCompilerOptions();
        compilerOptions.paths = compilerOptions.paths || {};
        Object.keys(paths).forEach(key => {
            compilerOptions.paths[key] = [paths[key]];
        });
    }
};
TypescriptDefaultsService.ctorParameters = () => [
    { type: CodeEditorService }
];
TypescriptDefaultsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TypescriptDefaultsService_Factory() { return new TypescriptDefaultsService(i0.ɵɵinject(i1.CodeEditorService)); }, token: TypescriptDefaultsService, providedIn: "root" });
TypescriptDefaultsService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __metadata("design:paramtypes", [CodeEditorService])
], TypescriptDefaultsService);
export { TypescriptDefaultsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXNjcmlwdC1kZWZhdWx0cy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nc3RhY2svY29kZS1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvdHlwZXNjcmlwdC1kZWZhdWx0cy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBS3ZFLElBQWEseUJBQXlCLEdBQXRDLE1BQWEseUJBQXlCO0lBR3BDLFlBQVksaUJBQW9DO1FBQzlDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDekMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7UUFDSCxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2xELElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQVc7UUFDZixJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFFckIsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUM7UUFFaEUsUUFBUSxDQUFDLGtCQUFrQixDQUFDO1lBQzFCLE1BQU0sRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsR0FBRztZQUNwRCxNQUFNLEVBQUUsVUFBVTtZQUNsQixNQUFNLEVBQUUsSUFBSTtZQUNaLEtBQUssRUFBRSxJQUFJO1lBQ1gscUJBQXFCLEVBQUUsSUFBSTtZQUMzQixzQkFBc0IsRUFBRSxJQUFJO1lBQzVCLG9CQUFvQixFQUFFLElBQUk7WUFDMUIsV0FBVyxFQUFFLElBQUk7WUFDakIsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQztZQUN0QixPQUFPLEVBQUUsR0FBRztZQUNaLEtBQUssRUFBRSxFQUFFO1NBQ1YsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWpDOzs7OztVQUtFO0lBQ0osQ0FBQztJQUVELGFBQWEsQ0FBQyxPQUFvQjtRQUNoQyxJQUFJLE9BQU8sRUFBRTtZQUNYLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzNDO0lBQ0gsQ0FBQztJQUVELFlBQVksQ0FBQyxPQUFpRCxFQUFFO1FBQzlELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzlDLE9BQU87U0FDUjtRQUVELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQztRQUVyRSxtQkFBbUI7UUFDbkIsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRS9DLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDakIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzdCLGlFQUFpRTtnQkFDakUsK0NBQStDO2dCQUMvQyxtQkFBbUI7Z0JBQ25CLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUM7YUFDN0M7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILG1CQUFtQjtRQUNuQixRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsZUFBZSxDQUFDLFFBQW1DLEVBQUU7UUFDbkQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsT0FBTztTQUNSO1FBRUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDO1FBQ3JFLE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQ3RELGVBQWUsQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7UUFFcEQsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDL0IsZUFBZSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGLENBQUE7O1lBdEZnQyxpQkFBaUI7OztBQUhyQyx5QkFBeUI7SUFIckMsVUFBVSxDQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQztxQ0FJK0IsaUJBQWlCO0dBSHJDLHlCQUF5QixDQXlGckM7U0F6RlkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29kZUVkaXRvclNlcnZpY2UsIFR5cGluZ3NJbmZvIH0gZnJvbSAnLi9jb2RlLWVkaXRvci5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVHlwZXNjcmlwdERlZmF1bHRzU2VydmljZSB7XG4gIHByaXZhdGUgbW9uYWNvOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoY29kZUVkaXRvclNlcnZpY2U6IENvZGVFZGl0b3JTZXJ2aWNlKSB7XG4gICAgY29kZUVkaXRvclNlcnZpY2UubG9hZGVkLnN1YnNjcmliZShldmVudCA9PiB7XG4gICAgICB0aGlzLnNldHVwKGV2ZW50Lm1vbmFjbyk7XG4gICAgfSk7XG4gICAgY29kZUVkaXRvclNlcnZpY2UudHlwaW5nc0xvYWRlZC5zdWJzY3JpYmUodHlwaW5ncyA9PiB7XG4gICAgICB0aGlzLnVwZGF0ZVR5cGluZ3ModHlwaW5ncyk7XG4gICAgfSk7XG4gIH1cblxuICBzZXR1cChtb25hY286IGFueSk6IHZvaWQge1xuICAgIGlmICghbW9uYWNvKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5tb25hY28gPSBtb25hY287XG5cbiAgICBjb25zdCBkZWZhdWx0cyA9IG1vbmFjby5sYW5ndWFnZXMudHlwZXNjcmlwdC50eXBlc2NyaXB0RGVmYXVsdHM7XG5cbiAgICBkZWZhdWx0cy5zZXRDb21waWxlck9wdGlvbnMoe1xuICAgICAgdGFyZ2V0OiBtb25hY28ubGFuZ3VhZ2VzLnR5cGVzY3JpcHQuU2NyaXB0VGFyZ2V0LkVTNixcbiAgICAgIG1vZHVsZTogJ2NvbW1vbmpzJyxcbiAgICAgIG5vRW1pdDogdHJ1ZSxcbiAgICAgIG5vTGliOiB0cnVlLFxuICAgICAgZW1pdERlY29yYXRvck1ldGFkYXRhOiB0cnVlLFxuICAgICAgZXhwZXJpbWVudGFsRGVjb3JhdG9yczogdHJ1ZSxcbiAgICAgIGFsbG93Tm9uVHNFeHRlbnNpb25zOiB0cnVlLFxuICAgICAgZGVjbGFyYXRpb246IHRydWUsXG4gICAgICBsaWI6IFsnZXMyMDE3JywgJ2RvbSddLFxuICAgICAgYmFzZVVybDogJy4nLFxuICAgICAgcGF0aHM6IHt9XG4gICAgfSk7XG5cbiAgICBkZWZhdWx0cy5zZXRNYXhpbXVtV29ya2VySWRsZVRpbWUoLTEpO1xuICAgIGRlZmF1bHRzLnNldEVhZ2VyTW9kZWxTeW5jKHRydWUpO1xuXG4gICAgLypcbiAgICBkZWZhdWx0cy5zZXREaWFnbm9zdGljc09wdGlvbnMoe1xuICAgICAgbm9TZW1hbnRpY1ZhbGlkYXRpb246IHRydWUsXG4gICAgICBub1N5bnRheFZhbGlkYXRpb246IHRydWVcbiAgICB9KTtcbiAgICAqL1xuICB9XG5cbiAgdXBkYXRlVHlwaW5ncyh0eXBpbmdzOiBUeXBpbmdzSW5mbykge1xuICAgIGlmICh0eXBpbmdzKSB7XG4gICAgICB0aGlzLmFkZEV4dHJhTGlicyh0eXBpbmdzLmZpbGVzKTtcbiAgICAgIHRoaXMuYWRkTGlicmFyeVBhdGhzKHR5cGluZ3MuZW50cnlQb2ludHMpO1xuICAgIH1cbiAgfVxuXG4gIGFkZEV4dHJhTGlicyhsaWJzOiBBcnJheTx7IHBhdGg6IHN0cmluZzsgY29udGVudDogc3RyaW5nIH0+ID0gW10pOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMubW9uYWNvIHx8ICFsaWJzIHx8IGxpYnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGVmYXVsdHMgPSB0aGlzLm1vbmFjby5sYW5ndWFnZXMudHlwZXNjcmlwdC50eXBlc2NyaXB0RGVmYXVsdHM7XG5cbiAgICAvLyB1bmRvY3VtZW50ZWQgQVBJXG4gICAgY29uc3QgcmVnaXN0ZXJlZExpYnMgPSBkZWZhdWx0cy5nZXRFeHRyYUxpYnMoKTtcblxuICAgIGxpYnMuZm9yRWFjaChsaWIgPT4ge1xuICAgICAgaWYgKCFyZWdpc3RlcmVkTGlic1tsaWIucGF0aF0pIHtcbiAgICAgICAgLy8gbmVlZHMgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnRzLCByZWNyZWF0ZXMgaXRzIHdvcmtlciBlYWNoIHRpbWVcbiAgICAgICAgLy8gZGVmYXVsdHMuYWRkRXh0cmFMaWIobGliLmNvbnRlbnQsIGxpYi5wYXRoKTtcbiAgICAgICAgLy8gdW5kb2N1bWVudGVkIEFQSVxuICAgICAgICBkZWZhdWx0cy5fZXh0cmFMaWJzW2xpYi5wYXRoXSA9IGxpYi5jb250ZW50O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gdW5kb2N1bWVudGVkIEFQSVxuICAgIGRlZmF1bHRzLl9vbkRpZENoYW5nZS5maXJlKGRlZmF1bHRzKTtcbiAgfVxuXG4gIGFkZExpYnJhcnlQYXRocyhwYXRoczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9KTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLm1vbmFjbykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRlZmF1bHRzID0gdGhpcy5tb25hY28ubGFuZ3VhZ2VzLnR5cGVzY3JpcHQudHlwZXNjcmlwdERlZmF1bHRzO1xuICAgIGNvbnN0IGNvbXBpbGVyT3B0aW9ucyA9IGRlZmF1bHRzLmdldENvbXBpbGVyT3B0aW9ucygpO1xuICAgIGNvbXBpbGVyT3B0aW9ucy5wYXRocyA9IGNvbXBpbGVyT3B0aW9ucy5wYXRocyB8fCB7fTtcblxuICAgIE9iamVjdC5rZXlzKHBhdGhzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb21waWxlck9wdGlvbnMucGF0aHNba2V5XSA9IFtwYXRoc1trZXldXTtcbiAgICB9KTtcbiAgfVxufVxuIl19