import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { CodeEditorService, TypingsInfo } from './code-editor.service';
import * as i0 from "@angular/core";
import * as i1 from "./code-editor.service";
let JavascriptDefaultsService = class JavascriptDefaultsService {
    constructor(codeEditorService) {
        codeEditorService.loaded.subscribe(event => {
            this.setup(event.monaco);
        });
        codeEditorService.typingsLoaded.subscribe(typings => {
            this.updateTypings(typings);
        });
    }
    setup(monaco) {
        if (!monaco) {
            return;
        }
        this.monaco = monaco;
        const defaults = monaco.languages.typescript.javascriptDefaults;
        defaults.setCompilerOptions({
            target: monaco.languages.typescript.ScriptTarget.ES6,
            module: 'commonjs',
            allowNonTsExtensions: true,
            baseUrl: '.',
            paths: {}
        });
        defaults.setMaximumWorkerIdleTime(-1);
        defaults.setEagerModelSync(true);
        /*
        defaults.setDiagnosticsOptions({
          noSemanticValidation: false,
          noSyntaxValidation: false
        });
        */
    }
    updateTypings(typings) {
        if (typings) {
            this.addExtraLibs(typings.files);
            this.addLibraryPaths(typings.entryPoints);
        }
    }
    addExtraLibs(libs = []) {
        if (!this.monaco || !libs || libs.length === 0) {
            return;
        }
        const defaults = this.monaco.languages.typescript.javascriptDefaults;
        // undocumented API
        const registeredLibs = defaults.getExtraLibs();
        libs.forEach(lib => {
            if (!registeredLibs[lib.path]) {
                // needs performance improvements, recreates its worker each time
                // defaults.addExtraLib(lib.content, lib.path);
                // undocumented API
                defaults._extraLibs[lib.path] = lib.content;
            }
        });
        // undocumented API
        defaults._onDidChange.fire(defaults);
    }
    addLibraryPaths(paths = {}) {
        if (!this.monaco) {
            return;
        }
        const defaults = this.monaco.languages.typescript.javascriptDefaults;
        const compilerOptions = defaults.getCompilerOptions();
        compilerOptions.paths = compilerOptions.paths || {};
        Object.keys(paths).forEach(key => {
            compilerOptions.paths[key] = [paths[key]];
        });
    }
};
JavascriptDefaultsService.ctorParameters = () => [
    { type: CodeEditorService }
];
JavascriptDefaultsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function JavascriptDefaultsService_Factory() { return new JavascriptDefaultsService(i0.ɵɵinject(i1.CodeEditorService)); }, token: JavascriptDefaultsService, providedIn: "root" });
JavascriptDefaultsService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __metadata("design:paramtypes", [CodeEditorService])
], JavascriptDefaultsService);
export { JavascriptDefaultsService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamF2YXNjcmlwdC1kZWZhdWx0cy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nc3RhY2svY29kZS1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvamF2YXNjcmlwdC1kZWZhdWx0cy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBS3ZFLElBQWEseUJBQXlCLEdBQXRDLE1BQWEseUJBQXlCO0lBR3BDLFlBQVksaUJBQW9DO1FBQzlDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDekMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7UUFDSCxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2xELElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQVc7UUFDZixJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFFckIsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUM7UUFFaEUsUUFBUSxDQUFDLGtCQUFrQixDQUFDO1lBQzFCLE1BQU0sRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsR0FBRztZQUNwRCxNQUFNLEVBQUUsVUFBVTtZQUNsQixvQkFBb0IsRUFBRSxJQUFJO1lBQzFCLE9BQU8sRUFBRSxHQUFHO1lBQ1osS0FBSyxFQUFFLEVBQUU7U0FDVixDQUFDLENBQUM7UUFFSCxRQUFRLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxRQUFRLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFakM7Ozs7O1VBS0U7SUFDSixDQUFDO0lBRUQsYUFBYSxDQUFDLE9BQW9CO1FBQ2hDLElBQUksT0FBTyxFQUFFO1lBQ1gsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDM0M7SUFDSCxDQUFDO0lBRUQsWUFBWSxDQUFDLE9BQWlELEVBQUU7UUFDOUQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDOUMsT0FBTztTQUNSO1FBRUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDO1FBRXJFLG1CQUFtQjtRQUNuQixNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFL0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNqQixJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDN0IsaUVBQWlFO2dCQUNqRSwrQ0FBK0M7Z0JBQy9DLG1CQUFtQjtnQkFDbkIsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQzthQUM3QztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsbUJBQW1CO1FBQ25CLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxlQUFlLENBQUMsUUFBbUMsRUFBRTtRQUNuRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQixPQUFPO1NBQ1I7UUFFRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUM7UUFDckUsTUFBTSxlQUFlLEdBQUcsUUFBUSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDdEQsZUFBZSxDQUFDLEtBQUssR0FBRyxlQUFlLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUVwRCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMvQixlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YsQ0FBQTs7WUFoRmdDLGlCQUFpQjs7O0FBSHJDLHlCQUF5QjtJQUhyQyxVQUFVLENBQUM7UUFDVixVQUFVLEVBQUUsTUFBTTtLQUNuQixDQUFDO3FDQUkrQixpQkFBaUI7R0FIckMseUJBQXlCLENBbUZyQztTQW5GWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb2RlRWRpdG9yU2VydmljZSwgVHlwaW5nc0luZm8gfSBmcm9tICcuL2NvZGUtZWRpdG9yLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBKYXZhc2NyaXB0RGVmYXVsdHNTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBtb25hY286IGFueTtcblxuICBjb25zdHJ1Y3Rvcihjb2RlRWRpdG9yU2VydmljZTogQ29kZUVkaXRvclNlcnZpY2UpIHtcbiAgICBjb2RlRWRpdG9yU2VydmljZS5sb2FkZWQuc3Vic2NyaWJlKGV2ZW50ID0+IHtcbiAgICAgIHRoaXMuc2V0dXAoZXZlbnQubW9uYWNvKTtcbiAgICB9KTtcbiAgICBjb2RlRWRpdG9yU2VydmljZS50eXBpbmdzTG9hZGVkLnN1YnNjcmliZSh0eXBpbmdzID0+IHtcbiAgICAgIHRoaXMudXBkYXRlVHlwaW5ncyh0eXBpbmdzKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNldHVwKG1vbmFjbzogYW55KTogdm9pZCB7XG4gICAgaWYgKCFtb25hY28pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm1vbmFjbyA9IG1vbmFjbztcblxuICAgIGNvbnN0IGRlZmF1bHRzID0gbW9uYWNvLmxhbmd1YWdlcy50eXBlc2NyaXB0LmphdmFzY3JpcHREZWZhdWx0cztcblxuICAgIGRlZmF1bHRzLnNldENvbXBpbGVyT3B0aW9ucyh7XG4gICAgICB0YXJnZXQ6IG1vbmFjby5sYW5ndWFnZXMudHlwZXNjcmlwdC5TY3JpcHRUYXJnZXQuRVM2LFxuICAgICAgbW9kdWxlOiAnY29tbW9uanMnLFxuICAgICAgYWxsb3dOb25Uc0V4dGVuc2lvbnM6IHRydWUsXG4gICAgICBiYXNlVXJsOiAnLicsXG4gICAgICBwYXRoczoge31cbiAgICB9KTtcblxuICAgIGRlZmF1bHRzLnNldE1heGltdW1Xb3JrZXJJZGxlVGltZSgtMSk7XG4gICAgZGVmYXVsdHMuc2V0RWFnZXJNb2RlbFN5bmModHJ1ZSk7XG5cbiAgICAvKlxuICAgIGRlZmF1bHRzLnNldERpYWdub3N0aWNzT3B0aW9ucyh7XG4gICAgICBub1NlbWFudGljVmFsaWRhdGlvbjogZmFsc2UsXG4gICAgICBub1N5bnRheFZhbGlkYXRpb246IGZhbHNlXG4gICAgfSk7XG4gICAgKi9cbiAgfVxuXG4gIHVwZGF0ZVR5cGluZ3ModHlwaW5nczogVHlwaW5nc0luZm8pIHtcbiAgICBpZiAodHlwaW5ncykge1xuICAgICAgdGhpcy5hZGRFeHRyYUxpYnModHlwaW5ncy5maWxlcyk7XG4gICAgICB0aGlzLmFkZExpYnJhcnlQYXRocyh0eXBpbmdzLmVudHJ5UG9pbnRzKTtcbiAgICB9XG4gIH1cblxuICBhZGRFeHRyYUxpYnMobGliczogQXJyYXk8eyBwYXRoOiBzdHJpbmc7IGNvbnRlbnQ6IHN0cmluZyB9PiA9IFtdKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLm1vbmFjbyB8fCAhbGlicyB8fCBsaWJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRlZmF1bHRzID0gdGhpcy5tb25hY28ubGFuZ3VhZ2VzLnR5cGVzY3JpcHQuamF2YXNjcmlwdERlZmF1bHRzO1xuXG4gICAgLy8gdW5kb2N1bWVudGVkIEFQSVxuICAgIGNvbnN0IHJlZ2lzdGVyZWRMaWJzID0gZGVmYXVsdHMuZ2V0RXh0cmFMaWJzKCk7XG5cbiAgICBsaWJzLmZvckVhY2gobGliID0+IHtcbiAgICAgIGlmICghcmVnaXN0ZXJlZExpYnNbbGliLnBhdGhdKSB7XG4gICAgICAgIC8vIG5lZWRzIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50cywgcmVjcmVhdGVzIGl0cyB3b3JrZXIgZWFjaCB0aW1lXG4gICAgICAgIC8vIGRlZmF1bHRzLmFkZEV4dHJhTGliKGxpYi5jb250ZW50LCBsaWIucGF0aCk7XG4gICAgICAgIC8vIHVuZG9jdW1lbnRlZCBBUElcbiAgICAgICAgZGVmYXVsdHMuX2V4dHJhTGlic1tsaWIucGF0aF0gPSBsaWIuY29udGVudDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIHVuZG9jdW1lbnRlZCBBUElcbiAgICBkZWZhdWx0cy5fb25EaWRDaGFuZ2UuZmlyZShkZWZhdWx0cyk7XG4gIH1cblxuICBhZGRMaWJyYXJ5UGF0aHMocGF0aHM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7fSk6IHZvaWQge1xuICAgIGlmICghdGhpcy5tb25hY28pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkZWZhdWx0cyA9IHRoaXMubW9uYWNvLmxhbmd1YWdlcy50eXBlc2NyaXB0LmphdmFzY3JpcHREZWZhdWx0cztcbiAgICBjb25zdCBjb21waWxlck9wdGlvbnMgPSBkZWZhdWx0cy5nZXRDb21waWxlck9wdGlvbnMoKTtcbiAgICBjb21waWxlck9wdGlvbnMucGF0aHMgPSBjb21waWxlck9wdGlvbnMucGF0aHMgfHwge307XG5cbiAgICBPYmplY3Qua2V5cyhwYXRocykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgY29tcGlsZXJPcHRpb25zLnBhdGhzW2tleV0gPSBbcGF0aHNba2V5XV07XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==