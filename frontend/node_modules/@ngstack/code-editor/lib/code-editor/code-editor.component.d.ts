import { OnChanges, OnDestroy, AfterViewInit, ElementRef, EventEmitter, SimpleChanges, OnInit } from '@angular/core';
import { CodeEditorService } from '../services/code-editor.service';
import { TypescriptDefaultsService } from '../services/typescript-defaults.service';
import { JavascriptDefaultsService } from '../services/javascript-defaults.service';
import { JsonDefaultsService } from '../services/json-defaults.service';
import { CodeModel } from '../models/code.model';
import * as ɵngcc0 from '@angular/core';
export declare class CodeEditorComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit {
    private editorService;
    private typescriptDefaults;
    private javascriptDefaults;
    private jsonDefaults;
    private _editor;
    private _model;
    private defaultOptions;
    private subscriptions;
    editorContent: ElementRef;
    codeModel: CodeModel;
    /**
     * Editor theme. Defaults to `vs`.
     *
     * Allowed values: `vs`, `vs-dark` or `hc-black`.
     * @memberof CodeEditorComponent
     */
    theme: string;
    /**
     * Editor options.
     *
     * See https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.ieditorconstructionoptions.html for more details.
     *
     * @memberof CodeEditorComponent
     */
    options: {};
    /**
     * Toggle readonly state of the editor.
     *
     * @memberof CodeEditorComponent
     */
    readOnly: boolean;
    valueChanged: EventEmitter<string>;
    loaded: EventEmitter<any>;
    constructor(editorService: CodeEditorService, typescriptDefaults: TypescriptDefaultsService, javascriptDefaults: JavascriptDefaultsService, jsonDefaults: JsonDefaultsService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    onResize(): void;
    ngAfterViewInit(): Promise<void>;
    private setupEditor;
    private setupDependencies;
    private setEditorValue;
    private updateModel;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CodeEditorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CodeEditorComponent, "ngs-code-editor", never, { "theme": "theme"; "options": "options"; "readOnly": "readOnly"; "codeModel": "codeModel"; }, { "valueChanged": "valueChanged"; "loaded": "loaded"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1lZGl0b3IuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNvZGUtZWRpdG9yLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uQ2hhbmdlcywgT25EZXN0cm95LCBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIFNpbXBsZUNoYW5nZXMsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29kZUVkaXRvclNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb2RlLWVkaXRvci5zZXJ2aWNlJztcbmltcG9ydCB7IFR5cGVzY3JpcHREZWZhdWx0c1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy90eXBlc2NyaXB0LWRlZmF1bHRzLnNlcnZpY2UnO1xuaW1wb3J0IHsgSmF2YXNjcmlwdERlZmF1bHRzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2phdmFzY3JpcHQtZGVmYXVsdHMuc2VydmljZSc7XG5pbXBvcnQgeyBKc29uRGVmYXVsdHNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvanNvbi1kZWZhdWx0cy5zZXJ2aWNlJztcbmltcG9ydCB7IENvZGVNb2RlbCB9IGZyb20gJy4uL21vZGVscy9jb2RlLm1vZGVsJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENvZGVFZGl0b3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcbiAgICBwcml2YXRlIGVkaXRvclNlcnZpY2U7XG4gICAgcHJpdmF0ZSB0eXBlc2NyaXB0RGVmYXVsdHM7XG4gICAgcHJpdmF0ZSBqYXZhc2NyaXB0RGVmYXVsdHM7XG4gICAgcHJpdmF0ZSBqc29uRGVmYXVsdHM7XG4gICAgcHJpdmF0ZSBfZWRpdG9yO1xuICAgIHByaXZhdGUgX21vZGVsO1xuICAgIHByaXZhdGUgZGVmYXVsdE9wdGlvbnM7XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zO1xuICAgIGVkaXRvckNvbnRlbnQ6IEVsZW1lbnRSZWY7XG4gICAgY29kZU1vZGVsOiBDb2RlTW9kZWw7XG4gICAgLyoqXG4gICAgICogRWRpdG9yIHRoZW1lLiBEZWZhdWx0cyB0byBgdnNgLlxuICAgICAqXG4gICAgICogQWxsb3dlZCB2YWx1ZXM6IGB2c2AsIGB2cy1kYXJrYCBvciBgaGMtYmxhY2tgLlxuICAgICAqIEBtZW1iZXJvZiBDb2RlRWRpdG9yQ29tcG9uZW50XG4gICAgICovXG4gICAgdGhlbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFZGl0b3Igb3B0aW9ucy5cbiAgICAgKlxuICAgICAqIFNlZSBodHRwczovL21pY3Jvc29mdC5naXRodWIuaW8vbW9uYWNvLWVkaXRvci9hcGkvaW50ZXJmYWNlcy9tb25hY28uZWRpdG9yLmllZGl0b3Jjb25zdHJ1Y3Rpb25vcHRpb25zLmh0bWwgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBDb2RlRWRpdG9yQ29tcG9uZW50XG4gICAgICovXG4gICAgb3B0aW9uczoge307XG4gICAgLyoqXG4gICAgICogVG9nZ2xlIHJlYWRvbmx5IHN0YXRlIG9mIHRoZSBlZGl0b3IuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgQ29kZUVkaXRvckNvbXBvbmVudFxuICAgICAqL1xuICAgIHJlYWRPbmx5OiBib29sZWFuO1xuICAgIHZhbHVlQ2hhbmdlZDogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgbG9hZGVkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjb25zdHJ1Y3RvcihlZGl0b3JTZXJ2aWNlOiBDb2RlRWRpdG9yU2VydmljZSwgdHlwZXNjcmlwdERlZmF1bHRzOiBUeXBlc2NyaXB0RGVmYXVsdHNTZXJ2aWNlLCBqYXZhc2NyaXB0RGVmYXVsdHM6IEphdmFzY3JpcHREZWZhdWx0c1NlcnZpY2UsIGpzb25EZWZhdWx0czogSnNvbkRlZmF1bHRzU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG9uUmVzaXplKCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IFByb21pc2U8dm9pZD47XG4gICAgcHJpdmF0ZSBzZXR1cEVkaXRvcjtcbiAgICBwcml2YXRlIHNldHVwRGVwZW5kZW5jaWVzO1xuICAgIHByaXZhdGUgc2V0RWRpdG9yVmFsdWU7XG4gICAgcHJpdmF0ZSB1cGRhdGVNb2RlbDtcbn1cbiJdfQ==