import { __assign, __decorate, __param, __metadata, __spread, __values, __awaiter, __generator } from 'tslib';
import { InjectionToken, Optional, Inject, ɵɵdefineInjectable, ɵɵinject, Injectable, EventEmitter, ViewChild, ElementRef, Input, Output, HostListener, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';
import { Subject, BehaviorSubject } from 'rxjs';
import { CommonModule } from '@angular/common';

var EDITOR_SETTINGS = new InjectionToken('EDITOR_SETTINGS');
var CodeEditorService = /** @class */ (function () {
    function CodeEditorService(settings) {
        // baseUrl = 'assets/monaco';
        this.baseUrl = 'https://unpkg.com/monaco-editor/min';
        // typingsWorkerUrl = 'assets/workers/typings-worker.js';
        this.typingsWorkerUrl = 'https://unpkg.com/@ngstack/code-editor/workers/typings-worker.js';
        this.typingsLoaded = new Subject();
        this.loaded = new Subject();
        this.loadingTypings = new BehaviorSubject(false);
        var defaults = __assign({ baseUrl: this.baseUrl, typingsWorkerUrl: this.typingsWorkerUrl }, settings);
        this.baseUrl = defaults.baseUrl;
        this.typingsWorkerUrl = defaults.typingsWorkerUrl;
    }
    CodeEditorService.prototype.loadTypingsWorker = function () {
        var _this = this;
        if (!this.typingsWorker && window.Worker) {
            if (this.typingsWorkerUrl.startsWith('http')) {
                var proxyScript = "importScripts('" + this.typingsWorkerUrl + "');";
                var proxy = URL.createObjectURL(new Blob([proxyScript], { type: 'text/javascript' }));
                this.typingsWorker = new Worker(proxy);
            }
            else {
                this.typingsWorker = new Worker(this.typingsWorkerUrl);
            }
            this.typingsWorker.addEventListener('message', function (e) {
                _this.loadingTypings.next(false);
                _this.typingsLoaded.next(e.data);
            });
        }
        return this.typingsWorker;
    };
    CodeEditorService.prototype.loadTypings = function (dependencies) {
        if (dependencies && dependencies.length > 0) {
            var worker = this.loadTypingsWorker();
            if (worker) {
                this.loadingTypings.next(true);
                worker.postMessage({
                    dependencies: dependencies
                });
            }
        }
    };
    CodeEditorService.prototype.loadEditor = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var onGotAmdLoader = function () {
                window.require.config({
                    paths: { vs: _this.baseUrl + "/vs" }
                });
                if (_this.baseUrl.startsWith('http')) {
                    var proxyScript = "\n            self.MonacoEnvironment = {\n              baseUrl: \"" + _this.baseUrl + "\"\n            };\n            importScripts('" + _this.baseUrl + "/vs/base/worker/workerMain.js');\n          ";
                    var proxy_1 = URL.createObjectURL(new Blob([proxyScript], { type: 'text/javascript' }));
                    window['MonacoEnvironment'] = {
                        getWorkerUrl: function () {
                            return proxy_1;
                        }
                    };
                }
                window.require(['vs/editor/editor.main'], function () {
                    _this.loaded.next({ monaco: monaco });
                    resolve();
                });
            };
            if (!window.require) {
                var loaderScript = document.createElement('script');
                loaderScript.type = 'text/javascript';
                loaderScript.src = _this.baseUrl + "/vs/loader.js";
                loaderScript.addEventListener('load', onGotAmdLoader);
                document.body.appendChild(loaderScript);
            }
            else {
                onGotAmdLoader();
            }
        });
    };
    CodeEditorService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [EDITOR_SETTINGS,] }] }
    ]; };
    CodeEditorService.ɵprov = ɵɵdefineInjectable({ factory: function CodeEditorService_Factory() { return new CodeEditorService(ɵɵinject(EDITOR_SETTINGS, 8)); }, token: CodeEditorService, providedIn: "root" });
    CodeEditorService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(0, Optional()),
        __param(0, Inject(EDITOR_SETTINGS)),
        __metadata("design:paramtypes", [Object])
    ], CodeEditorService);
    return CodeEditorService;
}());

var TypescriptDefaultsService = /** @class */ (function () {
    function TypescriptDefaultsService(codeEditorService) {
        var _this = this;
        codeEditorService.loaded.subscribe(function (event) {
            _this.setup(event.monaco);
        });
        codeEditorService.typingsLoaded.subscribe(function (typings) {
            _this.updateTypings(typings);
        });
    }
    TypescriptDefaultsService.prototype.setup = function (monaco) {
        if (!monaco) {
            return;
        }
        this.monaco = monaco;
        var defaults = monaco.languages.typescript.typescriptDefaults;
        defaults.setCompilerOptions({
            target: monaco.languages.typescript.ScriptTarget.ES6,
            module: 'commonjs',
            noEmit: true,
            noLib: true,
            emitDecoratorMetadata: true,
            experimentalDecorators: true,
            allowNonTsExtensions: true,
            declaration: true,
            lib: ['es2017', 'dom'],
            baseUrl: '.',
            paths: {}
        });
        defaults.setMaximumWorkerIdleTime(-1);
        defaults.setEagerModelSync(true);
        /*
        defaults.setDiagnosticsOptions({
          noSemanticValidation: true,
          noSyntaxValidation: true
        });
        */
    };
    TypescriptDefaultsService.prototype.updateTypings = function (typings) {
        if (typings) {
            this.addExtraLibs(typings.files);
            this.addLibraryPaths(typings.entryPoints);
        }
    };
    TypescriptDefaultsService.prototype.addExtraLibs = function (libs) {
        if (libs === void 0) { libs = []; }
        if (!this.monaco || !libs || libs.length === 0) {
            return;
        }
        var defaults = this.monaco.languages.typescript.typescriptDefaults;
        // undocumented API
        var registeredLibs = defaults.getExtraLibs();
        libs.forEach(function (lib) {
            if (!registeredLibs[lib.path]) {
                // needs performance improvements, recreates its worker each time
                // defaults.addExtraLib(lib.content, lib.path);
                // undocumented API
                defaults._extraLibs[lib.path] = lib.content;
            }
        });
        // undocumented API
        defaults._onDidChange.fire(defaults);
    };
    TypescriptDefaultsService.prototype.addLibraryPaths = function (paths) {
        if (paths === void 0) { paths = {}; }
        if (!this.monaco) {
            return;
        }
        var defaults = this.monaco.languages.typescript.typescriptDefaults;
        var compilerOptions = defaults.getCompilerOptions();
        compilerOptions.paths = compilerOptions.paths || {};
        Object.keys(paths).forEach(function (key) {
            compilerOptions.paths[key] = [paths[key]];
        });
    };
    TypescriptDefaultsService.ctorParameters = function () { return [
        { type: CodeEditorService }
    ]; };
    TypescriptDefaultsService.ɵprov = ɵɵdefineInjectable({ factory: function TypescriptDefaultsService_Factory() { return new TypescriptDefaultsService(ɵɵinject(CodeEditorService)); }, token: TypescriptDefaultsService, providedIn: "root" });
    TypescriptDefaultsService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [CodeEditorService])
    ], TypescriptDefaultsService);
    return TypescriptDefaultsService;
}());

var JavascriptDefaultsService = /** @class */ (function () {
    function JavascriptDefaultsService(codeEditorService) {
        var _this = this;
        codeEditorService.loaded.subscribe(function (event) {
            _this.setup(event.monaco);
        });
        codeEditorService.typingsLoaded.subscribe(function (typings) {
            _this.updateTypings(typings);
        });
    }
    JavascriptDefaultsService.prototype.setup = function (monaco) {
        if (!monaco) {
            return;
        }
        this.monaco = monaco;
        var defaults = monaco.languages.typescript.javascriptDefaults;
        defaults.setCompilerOptions({
            target: monaco.languages.typescript.ScriptTarget.ES6,
            module: 'commonjs',
            allowNonTsExtensions: true,
            baseUrl: '.',
            paths: {}
        });
        defaults.setMaximumWorkerIdleTime(-1);
        defaults.setEagerModelSync(true);
        /*
        defaults.setDiagnosticsOptions({
          noSemanticValidation: false,
          noSyntaxValidation: false
        });
        */
    };
    JavascriptDefaultsService.prototype.updateTypings = function (typings) {
        if (typings) {
            this.addExtraLibs(typings.files);
            this.addLibraryPaths(typings.entryPoints);
        }
    };
    JavascriptDefaultsService.prototype.addExtraLibs = function (libs) {
        if (libs === void 0) { libs = []; }
        if (!this.monaco || !libs || libs.length === 0) {
            return;
        }
        var defaults = this.monaco.languages.typescript.javascriptDefaults;
        // undocumented API
        var registeredLibs = defaults.getExtraLibs();
        libs.forEach(function (lib) {
            if (!registeredLibs[lib.path]) {
                // needs performance improvements, recreates its worker each time
                // defaults.addExtraLib(lib.content, lib.path);
                // undocumented API
                defaults._extraLibs[lib.path] = lib.content;
            }
        });
        // undocumented API
        defaults._onDidChange.fire(defaults);
    };
    JavascriptDefaultsService.prototype.addLibraryPaths = function (paths) {
        if (paths === void 0) { paths = {}; }
        if (!this.monaco) {
            return;
        }
        var defaults = this.monaco.languages.typescript.javascriptDefaults;
        var compilerOptions = defaults.getCompilerOptions();
        compilerOptions.paths = compilerOptions.paths || {};
        Object.keys(paths).forEach(function (key) {
            compilerOptions.paths[key] = [paths[key]];
        });
    };
    JavascriptDefaultsService.ctorParameters = function () { return [
        { type: CodeEditorService }
    ]; };
    JavascriptDefaultsService.ɵprov = ɵɵdefineInjectable({ factory: function JavascriptDefaultsService_Factory() { return new JavascriptDefaultsService(ɵɵinject(CodeEditorService)); }, token: JavascriptDefaultsService, providedIn: "root" });
    JavascriptDefaultsService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [CodeEditorService])
    ], JavascriptDefaultsService);
    return JavascriptDefaultsService;
}());

var JsonDefaultsService = /** @class */ (function () {
    function JsonDefaultsService(codeEditorService) {
        var _this = this;
        codeEditorService.loaded.subscribe(function (event) {
            _this.setup(event.monaco);
        });
    }
    JsonDefaultsService.prototype.setup = function (monaco) {
        if (!monaco) {
            return;
        }
        this.monaco = monaco;
        var defaults = monaco.languages.json.jsonDefaults;
        defaults.setDiagnosticsOptions({
            validate: true,
            allowComments: true,
            schemas: __spread(defaults._diagnosticsOptions.schemas, [
                {
                    uri: 'http://myserver/foo-schema.json',
                    // fileMatch: [id],
                    // fileMatch: ['*.json'],
                    schema: {
                        type: 'object',
                        properties: {
                            p1: {
                                enum: ['v1', 'v2']
                            },
                            p2: {
                                $ref: 'http://myserver/bar-schema.json'
                            }
                        }
                    }
                },
                {
                    uri: 'http://myserver/bar-schema.json',
                    // fileMatch: [id],
                    // fileMatch: ['*.json'],
                    schema: {
                        type: 'object',
                        properties: {
                            q1: {
                                enum: ['x1', 'x2']
                            }
                        }
                    }
                }
            ])
        });
    };
    JsonDefaultsService.prototype.addSchemas = function (id, definitions) {
        var e_1, _a;
        if (definitions === void 0) { definitions = []; }
        var defaults = this.monaco.languages.json.jsonDefaults;
        var options = defaults.diagnosticsOptions;
        var schemas = {};
        if (options && options.schemas && options.schemas.length > 0) {
            options.schemas.forEach(function (schema) {
                schemas[schema.uri] = schema;
            });
        }
        try {
            for (var definitions_1 = __values(definitions), definitions_1_1 = definitions_1.next(); !definitions_1_1.done; definitions_1_1 = definitions_1.next()) {
                var _b = definitions_1_1.value, uri = _b.uri, schema = _b.schema;
                schemas[uri] = {
                    uri: uri,
                    schema: schema,
                    fileMatch: [id || '*.json']
                };
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (definitions_1_1 && !definitions_1_1.done && (_a = definitions_1.return)) _a.call(definitions_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // console.log(schemas);
        // console.log(Object.values(schemas));
        options.schemas = Object.values(schemas);
        defaults.setDiagnosticsOptions(options);
    };
    JsonDefaultsService.ctorParameters = function () { return [
        { type: CodeEditorService }
    ]; };
    JsonDefaultsService.ɵprov = ɵɵdefineInjectable({ factory: function JsonDefaultsService_Factory() { return new JsonDefaultsService(ɵɵinject(CodeEditorService)); }, token: JsonDefaultsService, providedIn: "root" });
    JsonDefaultsService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [CodeEditorService])
    ], JsonDefaultsService);
    return JsonDefaultsService;
}());

var CodeEditorComponent = /** @class */ (function () {
    function CodeEditorComponent(editorService, typescriptDefaults, javascriptDefaults, jsonDefaults) {
        this.editorService = editorService;
        this.typescriptDefaults = typescriptDefaults;
        this.javascriptDefaults = javascriptDefaults;
        this.jsonDefaults = jsonDefaults;
        // private _value = '';
        this.defaultOptions = {
            lineNumbers: true,
            contextmenu: false,
            minimap: {
                enabled: false,
            },
        };
        this.subscriptions = [];
        // @Input()
        // set value(v: string) {
        //   if (v !== this._value) {
        //     this._value = v;
        //     this.setEditorValue(v);
        //     this.valueChanged.emit(v);
        //   }
        // }
        // get value(): string {
        //   return this._value;
        // }
        /**
         * Editor theme. Defaults to `vs`.
         *
         * Allowed values: `vs`, `vs-dark` or `hc-black`.
         * @memberof CodeEditorComponent
         */
        this.theme = 'vs';
        /**
         * Editor options.
         *
         * See https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.ieditorconstructionoptions.html for more details.
         *
         * @memberof CodeEditorComponent
         */
        this.options = {};
        /**
         * Toggle readonly state of the editor.
         *
         * @memberof CodeEditorComponent
         */
        this.readOnly = false;
        this.valueChanged = new EventEmitter();
        this.loaded = new EventEmitter();
    }
    CodeEditorComponent.prototype.ngOnInit = function () { };
    CodeEditorComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
        this.subscriptions = [];
        if (this._editor) {
            this._editor.dispose();
            this._editor = null;
        }
        if (this._model) {
            this._model.dispose();
            this._model = null;
        }
    };
    CodeEditorComponent.prototype.ngOnChanges = function (changes) {
        if (changes.codeModel && !changes.codeModel.firstChange) {
            this.updateModel(changes.codeModel.currentValue);
        }
        if (changes.readOnly && !changes.readOnly.firstChange) {
            if (this._editor) {
                this._editor.updateOptions({
                    readOnly: changes.readOnly.currentValue,
                });
            }
        }
        if (changes.theme && !changes.theme.firstChange) {
            monaco.editor.setTheme(changes.theme.currentValue);
        }
    };
    CodeEditorComponent.prototype.onResize = function () {
        if (this._editor) {
            this._editor.layout();
        }
    };
    CodeEditorComponent.prototype.ngAfterViewInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.editorService.loadEditor()];
                    case 1:
                        _a.sent();
                        this.setupEditor();
                        this.loaded.emit();
                        return [2 /*return*/];
                }
            });
        });
    };
    CodeEditorComponent.prototype.setupEditor = function () {
        var _this = this;
        var domElement = this.editorContent.nativeElement;
        var settings = __assign({ value: '', language: 'text', uri: 'code' }, this.codeModel);
        this._model = monaco.editor.createModel(settings.value, settings.language, monaco.Uri.file(settings.uri));
        var options = Object.assign({}, this.defaultOptions, this.options, {
            readOnly: this.readOnly,
            theme: this.theme,
            model: this._model,
        });
        this._editor = monaco.editor.create(domElement, options);
        this._model.onDidChangeContent(function (e) {
            var newValue = _this._model.getValue();
            if (_this.codeModel) {
                _this.codeModel.value = newValue;
            }
            _this.valueChanged.emit(newValue);
        });
        this.setupDependencies(this.codeModel);
    };
    CodeEditorComponent.prototype.setupDependencies = function (model) {
        if (!model) {
            return;
        }
        var language = model.language;
        if (language) {
            var lang = language.toLowerCase();
            switch (lang) {
                case 'typescript':
                    if (model.dependencies) {
                        this.editorService.loadTypings(model.dependencies);
                    }
                    break;
                case 'javascript':
                    if (model.dependencies) {
                        this.editorService.loadTypings(model.dependencies);
                    }
                    break;
                case 'json':
                    if (model.schemas) {
                        this.jsonDefaults.addSchemas(model.uri, model.schemas);
                    }
                    break;
                default:
                    break;
            }
        }
    };
    CodeEditorComponent.prototype.setEditorValue = function (value) {
        var _this = this;
        // Fix for value change while dispose in process.
        setTimeout(function () {
            if (_this._model) {
                _this._model.setValue(value);
            }
        });
    };
    CodeEditorComponent.prototype.updateModel = function (model) {
        if (model) {
            this.setEditorValue(model.value);
            if (this._model && typeof monaco !== undefined) {
                monaco.editor.setModelLanguage(this._model, model.language);
            }
            this.setupDependencies(model);
        }
    };
    CodeEditorComponent.ctorParameters = function () { return [
        { type: CodeEditorService },
        { type: TypescriptDefaultsService },
        { type: JavascriptDefaultsService },
        { type: JsonDefaultsService }
    ]; };
    __decorate([
        ViewChild('editor', { static: true }),
        __metadata("design:type", ElementRef)
    ], CodeEditorComponent.prototype, "editorContent", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CodeEditorComponent.prototype, "codeModel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CodeEditorComponent.prototype, "theme", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CodeEditorComponent.prototype, "options", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CodeEditorComponent.prototype, "readOnly", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], CodeEditorComponent.prototype, "valueChanged", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], CodeEditorComponent.prototype, "loaded", void 0);
    __decorate([
        HostListener('window:resize'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], CodeEditorComponent.prototype, "onResize", null);
    CodeEditorComponent = __decorate([
        Component({
            selector: 'ngs-code-editor',
            template: "<div id=\"editor\" #editor class=\"monaco-editor editor\"></div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            encapsulation: ViewEncapsulation.None,
            // tslint:disable-next-line
            host: { class: 'ngs-code-editor' },
            styles: [".editor{width:100%;height:inherit;min-height:200px}"]
        }),
        __metadata("design:paramtypes", [CodeEditorService,
            TypescriptDefaultsService,
            JavascriptDefaultsService,
            JsonDefaultsService])
    ], CodeEditorComponent);
    return CodeEditorComponent;
}());

var CodeEditorModule = /** @class */ (function () {
    function CodeEditorModule() {
    }
    CodeEditorModule_1 = CodeEditorModule;
    CodeEditorModule.forRoot = function (settings) {
        return {
            ngModule: CodeEditorModule_1,
            providers: [
                { provide: EDITOR_SETTINGS, useValue: settings },
                CodeEditorService,
                TypescriptDefaultsService,
                JavascriptDefaultsService,
                JsonDefaultsService
            ]
        };
    };
    CodeEditorModule.forChild = function () {
        return {
            ngModule: CodeEditorModule_1
        };
    };
    var CodeEditorModule_1;
    CodeEditorModule = CodeEditorModule_1 = __decorate([
        NgModule({
            imports: [CommonModule],
            declarations: [CodeEditorComponent],
            exports: [CodeEditorComponent]
        })
    ], CodeEditorModule);
    return CodeEditorModule;
}());

/*
 * Public API Surface of code-editor
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CodeEditorComponent, CodeEditorModule, CodeEditorService, EDITOR_SETTINGS, JavascriptDefaultsService, TypescriptDefaultsService, JsonDefaultsService as ɵb };
//# sourceMappingURL=ngstack-code-editor.js.map
