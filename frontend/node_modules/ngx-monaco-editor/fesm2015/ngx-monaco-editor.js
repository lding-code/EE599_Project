import { __decorate, __metadata, __param } from 'tslib';
import { EventEmitter, ViewChild, ElementRef, Output, InjectionToken, NgZone, Inject, Input, Component, forwardRef, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { fromEvent } from 'rxjs';
import { CommonModule } from '@angular/common';

let loadedMonaco = false;
let loadPromise;
class BaseEditor {
    constructor(config) {
        this.config = config;
        this.onInit = new EventEmitter();
    }
    ngAfterViewInit() {
        if (loadedMonaco) {
            // Wait until monaco editor is available
            loadPromise.then(() => {
                this.initMonaco(this._options);
            });
        }
        else {
            loadedMonaco = true;
            loadPromise = new Promise((resolve) => {
                const baseUrl = this.config.baseUrl || './assets';
                if (typeof (window.monaco) === 'object') {
                    resolve();
                    return;
                }
                const onGotAmdLoader = () => {
                    // Load monaco
                    window.require.config({ paths: { 'vs': `${baseUrl}/monaco/vs` } });
                    window.require(['vs/editor/editor.main'], () => {
                        if (typeof this.config.onMonacoLoad === 'function') {
                            this.config.onMonacoLoad();
                        }
                        this.initMonaco(this._options);
                        resolve();
                    });
                };
                // Load AMD loader if necessary
                if (!window.require) {
                    const loaderScript = document.createElement('script');
                    loaderScript.type = 'text/javascript';
                    loaderScript.src = `${baseUrl}/monaco/vs/loader.js`;
                    loaderScript.addEventListener('load', onGotAmdLoader);
                    document.body.appendChild(loaderScript);
                }
                else {
                    onGotAmdLoader();
                }
            });
        }
    }
    ngOnDestroy() {
        if (this._windowResizeSubscription) {
            this._windowResizeSubscription.unsubscribe();
        }
        if (this._editor) {
            this._editor.dispose();
            this._editor = undefined;
        }
    }
}
__decorate([
    ViewChild('editorContainer', { static: true }),
    __metadata("design:type", ElementRef)
], BaseEditor.prototype, "_editorContainer", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], BaseEditor.prototype, "onInit", void 0);

const NGX_MONACO_EDITOR_CONFIG = new InjectionToken('NGX_MONACO_EDITOR_CONFIG');

var EditorComponent_1;
let EditorComponent = EditorComponent_1 = class EditorComponent extends BaseEditor {
    constructor(zone, editorConfig) {
        super(editorConfig);
        this.zone = zone;
        this.editorConfig = editorConfig;
        this._value = '';
        this.propagateChange = (_) => { };
        this.onTouched = () => { };
    }
    set options(options) {
        this._options = Object.assign({}, this.config.defaultOptions, options);
        if (this._editor) {
            this._editor.dispose();
            this.initMonaco(options);
        }
    }
    get options() {
        return this._options;
    }
    set model(model) {
        this.options.model = model;
        if (this._editor) {
            this._editor.dispose();
            this.initMonaco(this.options);
        }
    }
    writeValue(value) {
        this._value = value || '';
        // Fix for value change while dispose in process.
        setTimeout(() => {
            if (this._editor && !this.options.model) {
                this._editor.setValue(this._value);
            }
        });
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    initMonaco(options) {
        const hasModel = !!options.model;
        if (hasModel) {
            const model = monaco.editor.getModel(options.model.uri || '');
            if (model) {
                options.model = model;
                options.model.setValue(this._value);
            }
            else {
                options.model = monaco.editor.createModel(options.model.value, options.model.language, options.model.uri);
            }
        }
        this._editor = monaco.editor.create(this._editorContainer.nativeElement, options);
        if (!hasModel) {
            this._editor.setValue(this._value);
        }
        this._editor.onDidChangeModelContent((e) => {
            const value = this._editor.getValue();
            // value is not propagated to parent when executing outside zone.
            this.zone.run(() => {
                this.propagateChange(value);
                this._value = value;
            });
        });
        this._editor.onDidBlurEditorWidget(() => {
            this.onTouched();
        });
        // refresh layout on resize event.
        if (this._windowResizeSubscription) {
            this._windowResizeSubscription.unsubscribe();
        }
        this._windowResizeSubscription = fromEvent(window, 'resize').subscribe(() => this._editor.layout());
        this.onInit.emit(this._editor);
    }
};
EditorComponent.ctorParameters = () => [
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [NGX_MONACO_EDITOR_CONFIG,] }] }
];
__decorate([
    Input('options'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], EditorComponent.prototype, "options", null);
__decorate([
    Input('model'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], EditorComponent.prototype, "model", null);
EditorComponent = EditorComponent_1 = __decorate([
    Component({
        selector: 'ngx-monaco-editor',
        template: '<div class="editor-container" #editorContainer></div>',
        providers: [{
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => EditorComponent_1),
                multi: true
            }],
        styles: [`
    :host {
      display: block;
      height: 200px;
    }

    .editor-container {
      width: 100%;
      height: 98%;
    }
  `]
    }),
    __param(1, Inject(NGX_MONACO_EDITOR_CONFIG)),
    __metadata("design:paramtypes", [NgZone, Object])
], EditorComponent);

let DiffEditorComponent = class DiffEditorComponent extends BaseEditor {
    constructor(editorConfig) {
        super(editorConfig);
        this.editorConfig = editorConfig;
    }
    set options(options) {
        this._options = Object.assign({}, this.config.defaultOptions, options);
        if (this._editor) {
            this._editor.dispose();
            this.initMonaco(options);
        }
    }
    get options() {
        return this._options;
    }
    set originalModel(model) {
        this._originalModel = model;
        if (this._editor) {
            this._editor.dispose();
            this.initMonaco(this.options);
        }
    }
    set modifiedModel(model) {
        this._modifiedModel = model;
        if (this._editor) {
            this._editor.dispose();
            this.initMonaco(this.options);
        }
    }
    initMonaco(options) {
        if (!this._originalModel || !this._modifiedModel) {
            throw new Error('originalModel or modifiedModel not found for ngx-monaco-diff-editor');
        }
        this._originalModel.language = this._originalModel.language || options.language;
        this._modifiedModel.language = this._modifiedModel.language || options.language;
        let originalModel = monaco.editor.createModel(this._originalModel.code, this._originalModel.language);
        let modifiedModel = monaco.editor.createModel(this._modifiedModel.code, this._modifiedModel.language);
        this._editorContainer.nativeElement.innerHTML = '';
        const theme = options.theme;
        this._editor = monaco.editor.createDiffEditor(this._editorContainer.nativeElement, options);
        options.theme = theme;
        this._editor.setModel({
            original: originalModel,
            modified: modifiedModel
        });
        // refresh layout on resize event.
        if (this._windowResizeSubscription) {
            this._windowResizeSubscription.unsubscribe();
        }
        this._windowResizeSubscription = fromEvent(window, 'resize').subscribe(() => this._editor.layout());
        this.onInit.emit(this._editor);
    }
};
DiffEditorComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NGX_MONACO_EDITOR_CONFIG,] }] }
];
__decorate([
    Input('options'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DiffEditorComponent.prototype, "options", null);
__decorate([
    Input('originalModel'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DiffEditorComponent.prototype, "originalModel", null);
__decorate([
    Input('modifiedModel'),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DiffEditorComponent.prototype, "modifiedModel", null);
DiffEditorComponent = __decorate([
    Component({
        selector: 'ngx-monaco-diff-editor',
        template: '<div class="editor-container" #editorContainer></div>',
        styles: [`
    :host {
      display: block;
      height: 200px;
    }

    .editor-container {
      width: 100%;
      height: 98%;
    }
  `]
    }),
    __param(0, Inject(NGX_MONACO_EDITOR_CONFIG)),
    __metadata("design:paramtypes", [Object])
], DiffEditorComponent);

var MonacoEditorModule_1;
let MonacoEditorModule = MonacoEditorModule_1 = class MonacoEditorModule {
    static forRoot(config = {}) {
        return {
            ngModule: MonacoEditorModule_1,
            providers: [
                { provide: NGX_MONACO_EDITOR_CONFIG, useValue: config }
            ]
        };
    }
};
MonacoEditorModule = MonacoEditorModule_1 = __decorate([
    NgModule({
        imports: [
            CommonModule
        ],
        declarations: [
            EditorComponent,
            DiffEditorComponent
        ],
        exports: [
            EditorComponent,
            DiffEditorComponent
        ]
    })
], MonacoEditorModule);

/*
 * Public API Surface of my-lib
 */

/**
 * Generated bundle index. Do not edit.
 */

export { DiffEditorComponent, EditorComponent, MonacoEditorModule, NGX_MONACO_EDITOR_CONFIG, BaseEditor as ɵa };
//# sourceMappingURL=ngx-monaco-editor.js.map
